// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/locale/locale_en-US.ini
// conf/locale/locale_fr-FR.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\xff\x52\xe3\xc8\xf1\xff\x7f\x9e\xa2\xd7\xdf\xba\xef\xb1\x29\x03\x06\x2e\x1c\xc1\xe7\xd4\x09\x5b\x06\xd5\xda\x16\x91\xe4\xdb\x23\x5b\x5b\xba\x41\x6a\xdb\x53\x8c\x67\xbc\x33\x23\x83\xf3\x47\x5e\x27\x0f\x92\x17\x4b\xf5\x48\x32\x86\x4b\x55\x0e\xaa\x6c\x18\x75\xf7\x74\x7f\x3e\xfd\x4b\xc1\xfd\x7d\x3e\x0b\xa6\x21\x0c\x60\x29\xdc\x89\x7b\x71\x6c\x18\xcc\xf2\x24\xbc\x8d\xd2\x2c\x4c\x60\x00\xce\x54\xc8\x82\x59\x3c\x7b\x98\xc6\xf3\x34\x1f\x26\x61\x90\x85\xed\x79\x1f\x42\xe1\x56\x68\xa0\x53\xe2\xb6\xd3\x85\xce\xc6\xe8\xb2\x03\xda\x40\xc7\xa1\x75\x1d\x96\xcc\x67\xf9\x34\x1e\x91\x42\x89\x5b\xc6\xbe\x58\x34\x5b\x34\x5f\xd9\x7d\x12\x67\xf1\x30\x9e\xc0\x00\x56\xce\x6d\xd8\x28\x9e\x06\xd1\x0c\x06\x20\x75\xc1\xe5\x4a\x5b\xc7\x92\x38\xce\xf2\x79\x42\x22\xdf\x1d\xb5\xf2\x1f\xed\xf5\xe9\xe9\x77\x47\xb5\xf8\x47\x7b\xfd\xdd\xd1\x5d\x96\xdd\xe7\xf7\x71\x92\x7d\xb4\xa7\x6c\x3e\x8b\x7e\xcd\xd3\x78\xf8\x29\xcc\xf2\xfb\x30\x99\x46\x69\x1a\xc5\x64\xf6\xf2\xf2\x92\x79\xc9\x60\x34\xa2\xb0\x7a\x27\xfe\x97\xed\xb5\x61\x00\x3f\xf4\x7a\x3d\x36\x8a\xd2\xe0\x66\x12\xe6\x49\x3c\xcf\xc2\x24\x9f\xc4\xb7\x30\x80\x05\x97\x96\xa2\x9d\x6f\x36\x68\x40\xe2\x16\x25\xe8\x05\x38\x5c\x6f\x24\x77\x08\x5c\x95\x60\x1d\x77\xa2\x80\x85\x90\x08\x1b\xee\x56\xac\x0f\x25\x2e\x78\x25\x1d\x08\x0b\x6e\x55\x9f\xc2\xf3\x0a\x0d\xb6\x60\xd3\x13\x7c\xc1\xa2\x72\x58\xb2\x34\x0b\xb2\x68\x98\xfb\xb0\xef\x83\xec\x0e\x06\x8c\x7d\x29\xb9\xe3\x8f\xdc\xe2\xd7\x03\xac\xd7\x3b\xfb\x4d\x7a\xb4\xb5\x75\x4b\x83\xb6\x46\xdc\x7e\x93\xc2\xe1\x45\xa7\x0b\x3b\x5d\x41\xc1\x15\x14\x5a\x29\x2c\x1c\x38\x0d\x99\x18\xdd\xc0\xb3\x70\x2b\x98\xee\xd2\xbf\x4d\x60\x63\xb4\xd3\x85\x96\x6c\x74\x93\x67\x0f\xf7\x44\x50\xa3\xcf\xee\xe2\x94\xd0\x38\x3b\xff\xd1\x63\x74\x76\x7d\x71\xd1\xbb\x64\x6d\x96\xe8\xa5\x65\xf3\xd4\xa7\x86\xd1\xda\xb1\xfb\x20\x4d\x3f\x8f\x60\xc0\xfa\x30\x26\x2f\x0e\x7c\x52\x72\xd7\x05\x6c\x13\x44\x58\xfe\x28\x91\xdc\x36\xf8\xad\x12\x06\x6b\xaf\xb7\x68\xc4\x62\x77\xbc\xa8\xa4\xec\xb0\x34\x9d\xec\xd3\xa5\x96\x6f\xcd\xb6\xc1\x79\xa8\x3b\x4e\x94\x8f\x9d\x2e\x54\x16\x81\x3f\x5a\x2d\x2b\xf7\x8a\xae\xf2\xe1\x5b\xc7\x8d\x03\x6e\x81\x12\x4e\x14\xc8\x6a\x44\x5b\xe0\x4f\xca\x47\xc6\xbe\x18\xdc\x68\x2b\x9c\x36\x3b\x82\x37\xd1\xda\xd5\x56\x16\xda\x80\x75\xda\x08\xb5\x84\xbd\x8c\x40\xfb\xbd\x05\xe2\xa3\x7b\x48\x6c\xe7\x9f\xa7\x3f\x55\x16\x8d\xe2\x6b\xfc\xeb\xe9\x52\xb8\x17\x77\x7c\xa8\xd3\xf1\x79\xec\xf1\x89\x16\xde\xb5\x67\xae\x3c\x25\x4d\x84\x50\x48\xad\xe8\xa6\xca\xd2\x27\x25\xe4\x3e\x09\x7d\x76\xde\x46\xd9\x41\x0a\x3e\x34\xdc\xda\x0d\x16\x62\xb1\x03\x02\xae\xf6\xda\x69\x8a\x0e\xc4\x02\x94\x56\xc7\xd6\x71\x55\x72\x53\xb2\x3e\xdc\x0a\x07\x8f\x42\x71\xb3\x23\x87\x89\x16\x42\xae\xf4\x61\xd2\x0d\x5e\xad\xda\x48\xcd\xcb\xe3\x0d\x2f\x9e\xe0\xa8\x58\x61\xf1\xa4\x2b\x07\x7a\x8b\xb5\xcc\x47\x76\x1b\x65\xf9\x4d\x34\x0b\x92\x87\x1a\x46\xc6\xbe\x48\xbd\xfc\xca\xde\xe4\x6b\x1f\x86\x5c\xc1\x23\x42\xa7\xd0\xca\x6a\x89\x0d\x61\x54\x15\x9d\xb7\xb8\xb5\x02\x54\x56\x16\xa1\xd0\xeb\x35\xa7\x18\x2c\x6e\xb8\xa1\xa2\x5a\x57\xd2\x89\x8d\x44\x58\xeb\x12\x6d\x17\xf0\x64\x79\xb2\x57\xeb\xfa\x42\xeb\xb0\x26\x5b\x9a\x53\xd6\x87\x9b\x6a\xb1\xf0\x35\xaa\x96\x6e\x45\x45\x5a\xac\xb8\x52\x28\xbb\xf0\x84\xb8\x01\xe1\x93\x42\x78\x17\x44\xcd\x47\xa9\xd5\xf7\x0e\x9e\x94\x7e\x86\xe7\x15\x77\xf5\xc3\x13\x76\x33\x1f\x8f\xa9\x01\x84\xd4\x3e\xce\x7a\xbd\x83\x02\xcc\x0c\x2f\x7c\x26\x47\x6a\xa1\xe9\xfb\x33\x37\x8a\xbe\x43\x63\xb4\xa1\x3f\xc6\xdc\x71\xf9\x2e\xe0\x5a\x8b\x4d\xc2\x5f\x42\xea\x69\xfe\x5f\xd6\xe6\xf7\x1e\x2e\x0a\xd6\x73\xe4\xe1\x3d\x69\xce\x29\x3f\x25\xf2\x2d\x02\xae\x37\x6e\x47\x38\x09\xb5\x42\x23\x5c\x6b\x6f\x6f\xc9\xe3\xf2\xde\x0c\x1d\xfe\x01\x1b\x7d\xc8\x56\xd4\x92\x14\x25\xa6\x05\x5e\x39\xbd\xe6\x0e\x4b\x90\x7a\x09\x46\x3b\xa2\xe5\xc8\x3e\x0b\x57\x78\x68\x17\x5a\x4a\xfd\x4c\x59\xab\x37\x4e\x68\x65\x3f\xb2\x49\x7c\x9b\x27\x71\xf6\x66\x46\xa4\xb8\x5c\xa3\x72\xde\x48\xc9\x85\xdc\xb1\x51\x10\x4d\x1e\x7e\x27\x37\xe5\x2f\x60\xc5\x3f\x10\xec\x4a\x2c\x1c\x5d\x40\x15\x21\xd1\x53\xfd\x06\xcb\xf3\x2b\x58\x23\x57\x16\xce\xe0\xa7\x9f\xe0\xfc\xaa\x0b\xe7\x7f\xbe\x9c\xde\xb0\x69\xf0\x6b\x9e\x46\x7f\x0f\xf3\xf4\x2e\x1a\x53\xd5\x9c\x5f\x35\x76\xa5\x50\x08\xaa\x5a\x3f\xa2\x79\x67\xd8\x2b\x4d\xa2\x59\x98\xd6\x3c\xd3\x0f\x71\xfd\xb2\x11\x06\x4b\x28\xf9\xce\x92\x06\x39\xef\x7b\xfb\x51\x89\x12\xa9\xe7\x2f\x1c\x1a\x58\xf3\x17\x2f\xf2\xd1\x9b\x19\x05\x0f\x64\xe5\xc7\x3d\x19\x56\xf2\xe2\xe9\x77\x6c\xf8\xd3\x3f\x44\xc7\x67\x7c\x5c\x69\xfd\x04\xf3\x64\xc2\xfc\x28\xac\xab\xee\xe4\x45\x9b\xb5\x1f\x09\x9e\xa9\xda\x31\xcf\x8f\xd0\x8a\xbd\xc7\x35\xa9\x89\xc3\x2d\x9a\x1d\x39\xdb\x08\xe4\x9e\x85\xdf\x89\x69\x55\x34\x06\x3d\x17\xf8\x52\xa0\xb5\x68\xe1\x05\x0e\x00\xde\x97\xc4\x94\xbf\x88\x75\xb5\xae\x61\x72\xba\x2e\x32\xa9\x97\x4b\x34\xde\x88\x3d\xc4\xe5\xc2\x2f\x00\xd6\x0a\xad\xde\xcc\x33\x5c\x6b\xb3\xa3\xb2\x69\xda\x04\x21\x67\xb0\x14\xf6\x5d\x05\x35\x82\xb4\x3c\xfc\x12\x8d\xfc\x0c\xf2\x0c\xf6\xe1\xde\xe8\xad\x28\xd1\x50\x23\x58\x88\x7d\x3e\xb2\x3e\xd4\x3a\xd7\xa0\xb4\x83\x15\xa1\xcd\xd5\xae\x95\xda\xa1\x63\x7d\x6f\xe2\x1a\x1a\xbf\x5e\xe7\x77\xd3\x70\x7e\xa3\x8e\x7f\xda\x3c\xb5\xbf\xb1\x3e\x78\xcf\xae\x41\xa1\x7b\xd6\xe6\x69\xe0\x8a\x4d\x97\x97\xa5\x19\x5c\x5f\x5e\xfc\xf8\x97\xee\x86\x5b\xfb\xac\x4d\x39\x58\xf3\x82\x1b\xad\xba\xe5\xe3\xa0\xd7\xdd\x68\x2d\x73\xc2\x73\x70\xd6\xeb\x75\x45\x29\x31\x77\x62\x8d\xba\x72\x83\xb3\x2b\xc2\xd1\xcf\xf4\x6b\x58\xea\x63\xfb\x4d\x1e\x97\x46\x6c\xd1\x9c\xfa\x43\x28\xad\x6a\x1d\xb6\x8e\x66\x52\xeb\x19\xcd\xdf\xeb\xf6\xbe\x9f\x5b\x1f\x73\x47\x29\xf1\xdb\x1e\xa4\x7c\x18\xcf\xc6\x11\x6d\x31\x6f\x22\xf1\x75\x59\x87\x5c\x68\xfd\x24\x10\x68\x82\xb1\x61\x1c\x7f\x8a\xc2\x76\x27\x14\xb9\x14\x4f\x98\x6f\xb4\x12\x68\x5f\x27\x18\xcd\xdd\x16\x2f\xa1\xfc\x02\x67\x9b\x71\x7f\x40\x57\x3d\xb1\x1a\x83\x69\x38\x9c\x27\xe1\xc1\x1c\x6b\x32\xd7\xa2\x6b\xee\x7f\xa3\xeb\x53\x32\x9c\xf9\x21\x98\x86\x59\x5e\x5b\x39\x6c\x29\xf5\xed\xb7\x43\x20\x1c\x41\x28\x87\x66\xcb\xe5\x1b\x23\x17\x97\xbd\x1e\xbb\x1d\xe6\xd1\x2c\x0b\x93\x5f\x82\x49\x9e\x45\x3e\x2a\x7f\xfe\x6a\x43\x8a\x05\x7a\x2b\x6f\x94\xaf\x2e\x7f\xe8\xf5\x58\x1a\xfa\x05\x32\x9f\x44\xe3\xb0\x55\xaf\x9f\xf4\x61\xf8\x0a\x9b\x1f\xa5\xc3\x34\x19\x33\xfa\xc8\xdf\x82\x98\x17\xd6\x2c\x7c\xe6\x17\x95\x11\xce\xef\x1a\x1f\x3e\x0c\xef\x82\xd9\x6d\x08\xd9\x5d\x94\x42\x16\xc3\xa7\x30\xbc\x87\x87\x78\x9e\x80\x5f\xae\x46\x41\x16\x40\x1a\x8c\xc3\x0f\x1f\x58\x1a\x0e\x93\x30\xcb\x3f\x85\x54\xab\x1f\xfe\xef\xe7\xf1\x28\xfc\x9c\x84\x9f\x93\xff\xff\xd3\x11\x8b\x66\x69\x16\x4c\x26\xf9\x24\x1e\x7e\x3a\x00\x37\xa8\x9c\x3e\x96\x7a\x29\x14\x18\x5c\xa3\xef\x7a\x54\xa1\xd4\x9e\x23\x5a\xef\xa7\xe1\xf4\x26\x4c\x5e\xfb\x55\xe3\x31\xdd\xfd\xfa\x3a\xf0\xe2\xf2\x02\x25\x5a\x27\x78\x2b\xb0\xd7\x7c\x23\x25\x2b\xc5\xff\x17\xd1\x7e\xb2\xb7\x5c\xd7\xcd\xae\x14\x05\x35\x1c\xda\x9e\xa0\x76\x96\x76\xe8\xca\xb6\xc4\xd7\xce\xd2\x5a\x4c\x2f\x1e\x6d\x06\xd4\x76\xff\xcb\xb3\xd6\x27\x6f\x2a\x6f\x4c\xb1\x2f\xe2\xec\x4a\x7d\x65\x93\x60\x76\x4b\xa1\xa2\x3a\x9e\xa7\xdd\x85\x39\x1e\x27\x7e\xa5\xa5\xb3\x50\x2d\xa5\xb0\xab\xee\xd8\x70\xf5\xef\x7f\x71\x41\x5a\x85\x69\x7a\x54\xed\xbd\xa9\x94\xdf\xd1\xe8\x18\x1c\xb7\x4f\x16\x36\x68\x84\xa6\x10\xa4\xdc\x9d\x34\x2e\x8f\x0e\xba\x69\xa5\x0e\xa5\xfd\x62\x7a\x4b\x68\xd5\xab\xa9\x3d\xf1\xef\x46\x41\x46\x31\x24\xaf\x0b\x1e\xe5\x95\x44\xae\xaa\xcd\xeb\xe6\xb9\x03\x6e\x8a\x95\xd8\xa2\xad\xfd\x3a\xa1\x27\x79\x73\x96\x17\xb5\xf8\xd7\xf7\xf6\xbc\x1f\xe9\xf0\x2e\x1c\xcd\x27\x04\xcb\xcf\x75\xff\x3f\xff\x81\xde\x4c\x32\x2a\x9a\xb2\x32\x7e\x60\x10\x1b\x7e\xe3\xa3\x8d\xa8\x31\x0b\x76\xa5\x2b\x59\xd2\x2a\xe7\x2f\xc0\x92\xc5\x13\xea\x26\xd9\x5d\x40\x0b\x11\x99\xf9\x4f\x00\x00\x00\xff\xff\x18\xc2\x62\x9c\x3d\x0e\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 3645, mode: os.FileMode(420), modTime: time.Unix(1494852648, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enUsIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xcb\x8a\xec\x36\x10\xdd\xfb\x2b\x0a\x6f\xb2\xb9\xf4\x07\x04\xb2\x08\x93\x09\x0c\x84\x10\x26\x24\x10\x86\x41\xa8\xad\x1a\xbb\xb8\xb2\x64\x4a\xe5\x7e\xfc\x7d\x28\xc9\x0f\xb9\x67\xee\xaa\xe5\xf3\x50\xab\x4e\x95\xf4\xe6\x63\x4f\xe1\xbd\x11\x12\x8f\xf0\x0b\xb4\x7f\x53\x1f\xe0\x25\xb4\x4d\xa2\x3e\x18\x0a\x07\x6c\x4e\xc8\xc1\x8e\x59\xf8\xcf\xb2\xde\x51\x33\x79\xdb\xe1\x10\xbd\x43\x56\xc5\x7f\x71\x66\x58\xc9\x53\xdb\xe0\x68\xc9\x2b\xf1\xac\x8b\xe5\xfb\x4b\x53\x66\x4e\x6d\x33\xd9\x94\xae\x91\x9d\x12\x7f\x2d\xeb\x1d\xfd\xd2\x1a\xa8\x43\x58\x15\xa7\xb6\x61\x9c\xd0\x8a\xf9\x91\xe7\xd7\xe0\x40\x06\x84\xa4\x55\xc5\x80\x30\x20\x63\xb6\x8d\x38\x9e\x91\x4d\x29\xf6\x75\xf9\x04\xad\xb7\x79\x63\xec\x29\x09\x72\x95\xdb\xeb\x02\xa9\xb5\xac\x8e\x68\x88\x62\xac\xf7\xf1\x8a\x6e\x27\xd8\x0a\xc5\x00\x21\x0a\x2c\x9c\xee\xfe\x11\x79\x7c\xdf\xab\x54\xe7\x68\xa5\x1b\xea\x14\x12\xb8\x88\x29\xfc\x24\x90\xa9\xba\x09\xab\x8f\x42\x17\x99\xb1\x13\xf5\xbd\x84\x8b\xf5\xe4\xb6\x76\x40\xe4\x2d\xa5\xca\x7c\x46\x0c\x46\xec\x77\x0c\x75\x8b\xc1\x7a\x46\xeb\xee\x90\x99\x6f\x90\x22\xf3\xbd\x72\x31\x26\xe4\x4b\x29\x6c\xf3\xac\xe0\x37\x98\x3c\xda\x84\xd0\x0d\x31\x26\x04\x1b\xa2\x0c\xb8\x0f\xc6\xe1\xe8\x22\xc8\xc1\x3c\x64\xf5\xe9\xec\x8b\xae\x6d\x92\xbd\x94\xa1\xd5\xdf\x6e\xb0\xa1\xc7\xd4\x36\xcf\x87\x39\xfb\x19\xd6\x49\x43\xe6\xc8\xf5\x86\x65\x20\x35\x6e\x2b\x1a\x7c\x42\x11\x0a\x7d\xaa\xda\xaa\xe5\xc0\x8a\xb7\xcd\x3c\x39\x2b\x68\x26\x8e\x1f\xe4\xd1\xa4\xb9\xeb\x30\xa5\xdc\x98\x02\x81\x1e\xc9\xc1\x42\x7c\xcc\xde\xdf\xeb\x9d\x57\x67\xf5\x0f\x9b\x71\xfb\x93\xe6\xad\x27\xb9\x89\x09\x78\xad\x74\x7f\xe2\x15\x7a\x92\x93\xdc\xa4\x6d\xd4\x91\x4c\x17\x83\x60\x10\xd3\xd9\xa0\x91\xe1\x38\xc9\x5d\xa5\x4f\x05\x87\xf8\x01\x59\x08\x45\x00\x67\x84\xac\x69\x9b\x1c\x85\x39\xec\x92\x73\x1c\xe2\xec\x9d\x4e\xd5\x2e\x5d\x4e\xf3\xde\x38\x4c\x1d\xd3\xa4\x13\xfb\x78\x8b\x7e\xdb\xa9\xd3\xe9\x54\x8e\x97\x77\xff\xea\x59\xf8\x7d\xc1\xe1\x4a\x32\x00\xde\x04\x43\xa2\x18\x16\xd7\x5a\xd3\x83\x69\x2d\x69\xb9\x9e\x9a\xb2\x99\x98\x2e\x56\xf6\x01\x58\xbe\x57\x76\x3e\x7b\xea\x76\x32\x7f\xb6\x8d\x75\x4e\x83\xcd\xa7\xcb\x0f\x80\x73\x10\xf0\x9a\x83\xda\xa3\xbf\xd0\x21\xfb\x7f\xa9\x0e\x7f\x15\x79\x4a\x52\x89\xfe\xa0\x94\x23\x5f\x74\x55\x23\xd1\x51\x2d\x7c\x76\x24\x9f\x77\xeb\x55\x53\xfa\x42\x81\xc4\x30\x4e\x31\x91\x44\xbe\x97\x91\x25\x81\x0a\xca\xc2\xb5\x8f\x8c\x63\xbc\xe0\x83\xe3\xa9\xf4\xbc\x70\x95\xb5\x6d\x3a\x6d\x72\xbe\x64\x71\x2a\x17\xfd\x49\x91\xfc\x0c\x65\xa4\x16\xeb\xda\xe8\x43\x32\x4f\x62\x22\xef\x43\xf6\xba\xff\xdb\x42\xa3\xd3\x57\xe5\x30\x61\x1d\xa3\xde\x97\xb3\x8f\xe7\x5c\x79\xbe\x81\x19\xa4\xd0\x83\xc2\xab\xb2\x47\x31\x14\x1c\xde\x76\x5d\x5f\x6e\x04\xbc\x28\xbc\xea\xb4\x7f\x18\xa4\xd4\x58\x74\xd6\x39\x95\x65\xb4\xdd\x22\x74\x78\x33\x57\x26\x41\x23\x8c\xb8\xab\xaf\x83\x76\x5e\x19\x35\x29\xb7\x7a\x7c\x8c\xdf\xe7\xe9\x41\x5e\xc0\x83\x4e\x8f\x3a\xa0\x75\x87\x93\x82\x22\x8f\x0a\xd3\xc5\x71\x24\xf9\x2c\x84\x42\x6c\x31\x6d\xb2\xf2\x46\xad\xec\xff\x01\x00\x00\xff\xff\xbc\x09\xff\xac\x9e\x07\x00\x00")

func confLocaleLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enUsIni,
		"conf/locale/locale_en-US.ini",
	)
}

func confLocaleLocale_enUsIni() (*asset, error) {
	bytes, err := confLocaleLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-US.ini", size: 1950, mode: os.FileMode(420), modTime: time.Unix(1494395450, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_frFrIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func confLocaleLocale_frFrIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_frFrIni,
		"conf/locale/locale_fr-FR.ini",
	)
}

func confLocaleLocale_frFrIni() (*asset, error) {
	bytes, err := confLocaleLocale_frFrIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_fr-FR.ini", size: 0, mode: os.FileMode(420), modTime: time.Unix(1493941287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
	"conf/locale/locale_en-US.ini": confLocaleLocale_enUsIni,
	"conf/locale/locale_fr-FR.ini": confLocaleLocale_frFrIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-US.ini": &bintree{confLocaleLocale_enUsIni, map[string]*bintree{}},
			"locale_fr-FR.ini": &bintree{confLocaleLocale_frFrIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

