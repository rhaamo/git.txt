// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/locale/locale_en-US.ini
// conf/locale/locale_fr-FR.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\x6f\x73\xda\x3e\x12\x7e\xaf\x4f\xb1\xe1\xa6\xf7\x4b\x6e\x48\x42\xd2\xdf\xa5\x39\x28\x37\x75\x40\x24\x9e\x00\x66\x6c\xd3\xb4\xd7\xc9\xb8\x8a\xbd\x06\x4d\x64\x89\x4a\x22\x81\x7b\x71\x5f\xe7\x3e\xc8\x7d\xb1\x1b\xc9\x40\x21\x7d\xd3\x64\x06\x27\xf2\xee\xa3\xdd\xe7\xd9\x3f\x04\x93\x49\x36\x0e\x46\x14\xba\x30\xe3\xf6\xcc\xae\x2c\x21\xdf\x0c\xea\x17\xd4\x8f\x64\x12\x47\x69\xd4\x8b\x86\xd0\x85\xb9\xb5\x0b\xd2\x8f\x46\x41\x38\x86\x2e\x08\x95\x33\x31\x57\xc6\x92\x38\x8a\xd2\x6c\x1a\x3b\x93\x77\xc7\x5b\xfb\x13\xd3\x3e\x3f\x7f\x77\x5c\x9b\x9f\x98\xf6\xbb\xe3\xbb\x34\x9d\x64\x93\x28\x4e\x4f\xcc\x39\x99\x8e\xc3\x2f\x59\x12\xf5\xee\x69\x9a\x4d\x68\x3c\x0a\x93\x24\x8c\x1c\xec\xd5\xd5\x15\xf1\x96\x41\xbf\x1f\x43\x17\x5a\x67\xfe\x97\xec\xbc\xa1\x0b\x7f\xb6\x5a\x2d\xd2\x0f\x93\xe0\x66\x48\xb3\x38\x9a\xa6\x34\xce\x86\xd1\x2d\x74\xa1\x64\xc2\x20\xe9\xc0\x74\xb1\x40\x0d\x02\x5f\x50\x80\x2a\xc1\x62\xb5\x10\xcc\x22\x30\x59\x80\xb1\xcc\xf2\x1c\x4a\x2e\x10\x16\xcc\xce\x49\x07\x0a\x2c\xd9\x52\x58\xe0\x06\xec\xbc\x3e\x85\xd7\x39\x6a\xdc\x12\xe2\xde\xe0\x0a\xf3\xa5\xc5\x82\x24\x69\x90\x86\xbd\xcc\xa7\x3d\x09\xd2\x3b\xe8\x12\xf2\x4d\xe3\x42\x19\x6e\x95\x5e\x3f\x92\x0e\xc4\x4a\xd9\x1a\xa6\x54\x1a\x8c\x55\x9a\xcb\x19\xec\x6c\x38\x9a\x3f\x0c\x14\xcc\xb2\xe6\xfe\xdd\x8d\xff\x9c\x7f\x5c\x1a\xd4\x92\x55\xf8\xcf\xf3\x19\xb7\x2b\x7b\xba\xef\xd3\xf0\x54\xfb\xeb\x84\x9a\x3d\x92\x83\x08\x3a\xd0\x63\x12\x9e\x10\x1a\xb9\x92\x46\x09\x6c\xf8\x6c\x1b\x2e\xcf\xc6\xe1\x35\x5b\x03\x47\x94\x41\xc8\x55\x55\x31\xb0\x0a\x0c\x2e\x98\x76\x34\x55\x4b\x61\xf9\x42\x20\x54\xaa\x40\xd3\x04\x3c\x9b\x9d\xed\xdc\x9a\x9e\xba\x06\x19\x45\x7d\x57\x32\x9b\x53\xd2\x81\x9b\x65\x59\x7a\xd6\xe5\xcc\xce\x1d\xed\xf9\x9c\x49\x89\xa2\x09\xcf\x88\x0b\xe0\x16\x98\x71\x9f\xdc\x00\x2f\x61\xad\x96\x50\x28\xf9\x87\x85\x67\xa9\x5e\xe1\x75\xce\x6c\xfd\xf2\x8c\xdc\x4c\x07\x03\x27\x29\x75\x05\x71\xd1\x6a\x91\x0e\x50\x6e\xe7\xa8\xa1\x91\x6a\x96\xbb\x74\x1a\xa1\x2c\x95\x7b\x3e\x30\x2d\xdd\x93\x6a\xad\xb4\xfb\x63\xc0\x2c\x13\x6f\x12\xae\xbd\xc8\x90\x7e\xa6\xae\x4a\xfd\xbf\x8e\xb1\x81\xd2\x7b\x74\xb9\x64\x41\x49\xb1\xf6\xf4\x9e\x6d\xce\x9d\x9c\x02\xd9\x0b\x02\x56\x0b\xbb\x76\x3c\x71\x39\x47\xcd\xed\x16\x6f\x87\xe4\x79\x79\x0b\xe3\x0e\x7f\x03\xa3\x03\xe9\xdc\x15\x99\x64\x4f\x02\x0d\xb0\xa5\x55\x15\xb3\x58\x80\x50\x33\xd0\xca\x3a\x59\x8e\xcd\x2b\xb7\xb9\xa7\xb6\x54\x42\xa8\x57\x57\x54\x6a\x61\xb9\x92\xe6\x84\x0c\xa3\xdb\x2c\x8e\xd2\x20\x75\xaa\x58\xbd\x74\x92\x24\x38\xab\x50\x5a\x0f\x52\x30\x2e\xd6\xa4\x1f\x84\xc3\xaf\xbf\xd8\x8d\xd8\x0a\x0c\xff\x37\x82\x99\xf3\xd2\xba\x0b\x0c\x97\x33\x81\x5e\xea\x03\x2e\x2f\xaf\xa1\x42\x26\x0d\x5c\xc0\xc7\x8f\x70\x79\xdd\x84\xcb\xbf\x5f\x8d\x6e\xc8\x28\xf8\x92\x25\xe1\xbf\x68\x96\xdc\x85\x03\xd7\xa4\x97\xd7\x1b\x5c\xc1\x25\x82\x5c\x56\x4f\xa8\xdf\x00\x7b\xa7\x61\x38\xa6\x49\xad\xb3\xfb\x71\x5a\xaf\x16\x5c\x63\x01\x05\x5b\x1b\xe7\xe1\x82\xf7\xdd\x7a\x5c\xa0\x40\xd7\xc5\xa5\x45\x0d\x15\x5b\x79\x93\x13\x0f\xd3\x0f\xbe\x3a\x94\x0f\x3b\x31\x8c\x60\xf9\xf3\x2f\x6a\xf8\xd3\xdf\x92\xe3\x01\x9f\xe6\x4a\x3d\xc3\x34\x1e\x12\x3f\xdc\xea\xae\x3b\x5b\x29\x5d\x39\x00\xea\x95\xaa\x03\xf3\xfa\x70\x25\xc9\x5b\x5e\xe3\x5a\x38\x7c\x41\xbd\x76\xc1\x6e\x0c\x32\xaf\xc2\x2f\x66\x4a\xe6\x1b\x40\xaf\x05\xae\x72\x34\x06\x0d\xac\x60\x8f\xe0\x5d\x4b\x8c\xd8\x8a\x57\xcb\xaa\xa6\xc9\xaa\xba\xc9\x84\x9a\xcd\x50\x7b\x10\xb3\xcf\xcb\x7b\x3f\xd2\x8d\xe1\x4a\x3e\xee\xb5\x53\x85\x95\xd2\x6b\xd7\x36\x9b\x31\xe1\x98\xd3\x58\x70\xf3\xa6\x83\x36\x86\x6e\x1d\x7c\x0e\xfb\xd4\x4d\xe6\xfa\x88\x74\x60\xa2\xd5\x0b\x2f\x50\xbb\x51\x50\xf2\x5d\x45\x92\xce\xc6\xa4\x0d\x52\x59\x98\x3b\xbe\x99\x5c\x6f\xad\xd6\x68\x49\xc7\x07\xda\x86\x4d\x64\x3f\x67\xf2\x66\xe4\x7c\x77\x23\xf2\x7c\xf3\xd6\x7c\x27\x1d\xf0\xb1\xb5\x41\xa2\x7d\x55\xfa\xb9\x6b\xf3\x45\x93\x15\x85\xee\xb6\xaf\xde\x7f\xf8\x47\x73\xc1\x8c\x79\x55\xba\xe8\x56\x2c\x67\x5a\xc9\x66\xf1\xd4\x6d\x35\x17\x4a\x89\xcc\x31\xda\xbd\x68\xb5\x9a\xbc\x10\x98\x59\x5e\xa1\x5a\xda\xee\xc5\xb5\x63\xb2\x5a\x9b\x1f\xa2\x0d\x33\x75\x6a\x7e\x88\xd3\x42\xf3\x17\xd4\xe7\xfe\x10\x0a\x23\xb7\x01\x1b\xeb\x86\xf8\x36\x32\xad\x94\x6d\x6f\xef\xfb\xb4\x8d\x31\xb3\xae\x28\xbe\xef\x68\xca\x7a\xd1\x78\x10\xba\xcd\x74\x90\x89\xef\xcc\x3a\xe5\x5c\xa9\x67\x8e\xe0\x46\x3e\xe9\x45\xd1\x7d\x48\xb7\xbb\x98\x67\x82\x3f\x63\x36\x53\x33\x6e\x9d\x47\x58\xcf\xcc\xa5\xc1\x1d\x5f\x5c\xfa\xa5\x6c\x7c\x81\x1f\x08\x56\x2f\xc2\x0d\x60\x42\x7b\xd3\x98\xee\xad\xc7\x4d\xed\x1a\xb4\x9b\xfb\x0f\x7c\x7d\x51\xd2\xb1\xdf\xae\x09\x4d\xb3\x1a\x65\x7f\xa8\xd4\xb7\xdf\xf6\xc0\xf1\x08\x5c\x5a\xd4\x2f\x4c\x1c\x80\xbc\xbf\x6a\xb5\xc8\x6d\x2f\x0b\xc7\x29\x8d\x3f\x07\xc3\x2c\x0d\x7d\x56\xfe\xfc\x27\x86\xe0\x25\x7a\x94\x03\xe7\xeb\xab\x3f\x5b\x2d\x92\x50\xff\xa5\x20\x1b\x86\x03\xba\x75\xaf\xdf\x74\xa0\xf7\x93\x36\xbf\x62\x7b\x49\x3c\x20\xee\x23\x3b\x24\x31\xcb\x8d\x2e\x7d\xed\xe7\x4b\xcd\xad\x5f\xce\x47\x47\xbd\xbb\x60\x7c\x4b\x21\xbd\x0b\x13\x48\x23\xb8\xa7\x74\x02\x5f\xa3\x69\x0c\xd3\x84\xc6\xd0\x0f\xd2\x00\x92\x60\x40\x8f\x8e\x48\x42\x7b\x31\x4d\xb3\x7b\xea\xba\xf5\xe8\x2f\x9f\x06\x7d\xfa\x10\xd3\x87\xf8\xaf\x7f\x3b\x26\xe4\x1b\xbf\xb8\x96\x8f\x64\x18\x8c\x6f\x5d\x8f\xa1\x3c\x9d\x26\xcd\x52\x9f\x0e\x62\xe2\xae\x77\x67\x54\xce\x04\x37\xf3\xe6\x40\x33\xf9\xbf\xff\x32\x6e\xc8\xff\x03\x00\x00\xff\xff\x33\xb3\xaa\xe9\x6e\x09\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 2414, mode: os.FileMode(420), modTime: time.Unix(1493941359, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enUsIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func confLocaleLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enUsIni,
		"conf/locale/locale_en-US.ini",
	)
}

func confLocaleLocale_enUsIni() (*asset, error) {
	bytes, err := confLocaleLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-US.ini", size: 0, mode: os.FileMode(420), modTime: time.Unix(1493941326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_frFrIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func confLocaleLocale_frFrIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_frFrIni,
		"conf/locale/locale_fr-FR.ini",
	)
}

func confLocaleLocale_frFrIni() (*asset, error) {
	bytes, err := confLocaleLocale_frFrIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_fr-FR.ini", size: 0, mode: os.FileMode(420), modTime: time.Unix(1493941287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
	"conf/locale/locale_en-US.ini": confLocaleLocale_enUsIni,
	"conf/locale/locale_fr-FR.ini": confLocaleLocale_frFrIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-US.ini": &bintree{confLocaleLocale_enUsIni, map[string]*bintree{}},
			"locale_fr-FR.ini": &bintree{confLocaleLocale_frFrIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

