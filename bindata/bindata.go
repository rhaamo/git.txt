// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/locale/locale_en-US.ini
// conf/locale/locale_fr-FR.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\xff\x72\xdb\xc6\xf1\xff\xff\x9e\x62\xcd\xef\xe4\x1b\xb9\x43\x51\x94\x9d\x2a\xae\x14\x76\x02\x91\xa0\x84\x31\x49\x28\x00\x18\x47\xf5\x78\x90\x13\xb0\x24\xaf\x04\xee\xe0\xbb\x83\x44\xf6\x8f\xbe\x4e\x1f\xa4\x2f\xd6\xd9\x03\x40\x51\x72\x67\x1a\x7b\x86\x14\x0f\xbb\x7b\xbb\x9f\xfd\xec\x0f\x78\x77\x77\xe9\xc2\x9b\xfb\x30\x82\xb5\xb0\x03\xbb\xb3\x6c\xec\x2d\xd2\xc8\xbf\x09\xe2\xc4\x8f\x60\x04\x56\xd7\xc8\xbc\x45\xb8\xb8\x9f\x87\xcb\x38\x1d\x47\xbe\x97\xf8\xdd\xf9\x15\xf8\xc2\x6e\x50\x43\x2f\xc7\xc7\x5e\x1f\x7a\x95\x56\x79\x0f\x94\x86\x9e\x45\x63\x7b\x2c\x5a\x2e\xd2\x79\x38\x21\x85\x1c\x1f\x19\xfb\x6c\x50\x3f\xa2\xfe\xc2\xee\xa2\x30\x09\xc7\xe1\x0c\x46\xb0\xb1\xb6\x62\x93\x70\xee\x05\x0b\x18\x41\xa1\x32\x5e\x6c\x94\xb1\x2c\x0a\xc3\x24\x5d\x46\x24\xf2\xdd\x49\x27\xff\xd6\x5c\x9e\x9d\x7d\x77\xd2\x88\xbf\x35\x97\xdf\x9d\xdc\x26\xc9\x5d\x7a\x17\x46\xc9\x5b\x73\xc6\x96\x8b\xe0\xb7\x34\x0e\xc7\x1f\xfd\x24\xbd\xf3\xa3\x79\x10\xc7\x41\x48\x66\x2f\x2e\x2e\x98\x93\xf4\x26\x13\x0a\x6b\x38\x70\xff\xd9\x41\x1b\x46\xf0\xc3\x70\x38\x64\x93\x20\xf6\xae\x67\x7e\x1a\x85\xcb\xc4\x8f\xd2\x59\x78\x03\x23\x58\xf1\xc2\x50\xb4\xcb\xaa\x42\x0d\x05\x3e\x62\x01\x6a\x05\x16\xcb\xaa\xe0\x16\x81\xcb\x1c\x8c\xe5\x56\x64\xb0\x12\x05\x42\xc5\xed\x86\x5d\x41\x8e\x2b\x5e\x17\x16\x84\x01\xbb\x69\x4e\xe1\x69\x83\x1a\x3b\xb0\xe9\x09\xee\x30\xab\x2d\xe6\x2c\x4e\xbc\x24\x18\xa7\x2e\xec\x3b\x2f\xb9\x85\x11\x63\x9f\x73\x6e\xf9\x03\x37\xf8\xe5\x08\xeb\x72\x6f\xbe\x16\x0e\x6d\x65\xec\x5a\xa3\x69\x10\x37\x5f\x0b\x61\xf1\x7d\xaf\x0f\x7b\x55\x43\xc6\x25\x64\x4a\x4a\xcc\x2c\x58\x05\x89\x98\x5c\xc3\x93\xb0\x1b\x98\xef\xe3\x5f\x66\x50\x69\x65\x55\xa6\x0a\x36\xb9\x4e\x93\xfb\x3b\x4a\x50\xab\xcf\x6e\xc3\x98\xd0\x38\x7f\xf7\xa3\xc3\xe8\xfc\xf2\xfd\xfb\xe1\x05\xeb\x58\xa2\xd6\x86\x2d\x63\x47\x0d\xad\x94\x65\x77\x5e\x1c\x7f\x9a\xc0\x88\x5d\xc1\x94\xbc\x38\xf2\x49\x16\xfb\x3e\x60\x47\x10\x61\xf8\x43\x81\xe4\xb6\xc6\xaf\xb5\xd0\xd8\x78\xfd\x88\x5a\xac\xf6\xa7\xab\xba\x28\x7a\x2c\x8e\x67\x07\xba\x34\xf2\x9d\xd9\x2e\x38\x07\x75\xcf\x8a\xfc\xa1\xd7\x87\xda\x20\xf0\x07\xa3\x8a\xda\x3e\xa3\x2b\x5d\xf8\xc6\x72\x6d\x81\x1b\x20\xc2\x89\x0c\x59\x83\x68\x07\xfc\x20\x7f\x60\xec\xb3\xc6\x4a\x19\x61\x95\xde\x13\xbc\x91\x52\xb6\xb1\xb2\x52\x1a\x8c\x55\x5a\xc8\x35\x1c\x64\x04\x9a\xef\x0d\x50\x3e\xfa\xc7\x89\xed\xfd\xf3\xec\xa7\xda\xa0\x96\xbc\xc4\xbf\x9e\xad\x85\xdd\xd9\xd3\x63\x9d\x9e\xe3\xb1\xc3\x27\x58\x39\xd7\x9e\xb8\x74\x29\x69\x23\x84\xac\x50\x92\x6e\xaa\x0d\x7d\x12\x21\x0f\x24\x74\xec\xbc\x09\x92\x23\x0a\xde\xb7\xb9\x35\x15\x66\x62\xb5\x07\x02\xae\xf1\xda\x2a\x8a\x0e\xc4\x0a\xa4\x92\xa7\xc6\x72\x99\x73\x9d\xb3\x2b\xb8\x11\x16\x1e\x84\xe4\x7a\x4f\x0e\x53\x5a\x08\xb9\xdc\x85\x49\x37\x38\xb5\xba\x2a\x14\xcf\x4f\x2b\x9e\x6d\xe1\x24\xdb\x60\xb6\x55\xb5\x05\xf5\x88\x8d\xcc\x5b\x76\x13\x24\xe9\x75\xb0\xf0\xa2\xfb\x06\x46\xc6\x3e\x17\x6a\xfd\x85\xbd\xe0\xeb\x15\x8c\xb9\x84\x07\x84\x5e\xa6\xa4\x51\x05\xb6\x09\xa3\xaa\xe8\xbd\xc4\xad\x13\xa0\xb2\x32\x08\x99\x2a\x4b\x4e\x31\x18\xac\xb8\xa6\xa2\x2a\xeb\xc2\x8a\xaa\x40\x28\x55\x8e\xa6\x0f\x38\x58\x0f\x0e\x6a\x7d\x57\x68\x3d\xd6\xb2\xa5\x3d\x65\x57\x70\x5d\xaf\x56\xae\x46\xe5\xda\x6e\xa8\x48\xb3\x0d\x97\x12\x8b\x3e\x6c\x11\x2b\x10\x8e\x14\xc2\xb9\x20\x9a\x7c\xe4\x4a\x7e\x6f\x61\x2b\xd5\x13\x3c\x6d\xb8\x6d\x1e\x0e\xd8\xf5\x72\x3a\xa5\x06\xe0\x53\xfb\x38\x1f\x0e\x8f\x0a\x30\xd1\x3c\x73\x4c\x0e\xe4\x4a\xd1\xf7\x27\xae\x25\x7d\xfb\x5a\x2b\x4d\x7f\x4c\xb9\xe5\xc5\xab\x80\x1b\x2d\x36\xf3\x7f\xf5\xa9\xa7\xb9\x9f\xac\xe3\xf7\x01\x2e\x0a\xd6\xe5\xc8\xc1\x3b\x68\xcf\x89\x9f\x05\xf2\x47\x04\x2c\x2b\xbb\x27\x9c\x84\xdc\xa0\x16\xb6\xb3\x77\xb0\xe4\x70\x79\x6d\x86\x0e\xff\x80\x8d\x2b\x48\x36\xd4\x92\x24\x11\xd3\x00\xaf\xad\x2a\xb9\xc5\x1c\x0a\xb5\x06\xad\x2c\xa5\xe5\xc4\x3c\x09\x9b\x39\x68\x57\xaa\x28\xd4\x13\xb1\x56\x55\x56\x28\x69\xde\xb2\x59\x78\x93\x46\x61\xf2\x62\x46\xc4\xb8\x2e\x51\x5a\x67\x24\xe7\xa2\xd8\xb3\x89\x17\xcc\xee\xbf\x91\x9b\xf3\x1d\x18\xf1\x0f\x04\xb3\x11\x2b\x4b\x17\x50\x45\x14\xe8\x52\xfd\x02\xcb\x77\x1f\xa0\x44\x2e\x0d\x9c\xc3\x4f\x3f\xc1\xbb\x0f\x7d\x78\xf7\xe7\x8b\xf9\x35\x9b\x7b\xbf\xa5\x71\xf0\x37\x3f\x8d\x6f\x83\x29\x55\xcd\xbb\x0f\xad\xdd\x42\x48\x04\x59\x97\x0f\xa8\x5f\x19\x76\x4a\xb3\x60\xe1\xc7\x4d\x9e\xe9\x1f\xe5\x7a\x57\x09\x8d\x39\xe4\x7c\x6f\x48\x83\x9c\x77\xbd\xfd\x24\xc7\x02\xa9\xe7\xaf\x2c\x6a\x28\xf9\xce\x89\xbc\x75\x66\x26\xde\x3d\x59\xf9\xf1\x90\x0c\x53\xf0\x6c\xfb\x4d\x36\xdc\xe9\x1f\x4a\xc7\x27\x7c\xd8\x28\xb5\x85\x65\x34\x63\x6e\x14\x36\x55\x37\xd8\x29\x5d\xba\x91\xe0\x32\xd5\x38\xe6\xf2\x23\x94\x64\xaf\x71\x8d\x9a\xc4\xe1\x23\xea\x3d\x39\xdb\x0a\xa4\x2e\x0b\xdf\x88\x29\x99\xb5\x06\x5d\x2e\x70\x97\xa1\x31\x68\x60\x07\x47\x00\x1f\x4a\x62\xce\x77\xa2\xac\xcb\x06\x26\xab\x9a\x22\x2b\xd4\x7a\x8d\xda\x19\x31\xc7\xb8\xbc\x77\x0b\x80\x31\x42\xc9\x17\xf3\x0c\x4b\xa5\xf7\x54\x36\x6d\x9b\x20\xe4\x34\xe6\xc2\xbc\xaa\xa0\x56\x90\x96\x87\x5f\x83\x89\x9b\x41\x2e\x83\x57\x70\xa7\xd5\xa3\xc8\x51\x53\x23\x58\x89\x03\x1f\xd9\x15\x34\x3a\x97\x20\x95\x85\x0d\xa1\xcd\xe5\xbe\x93\xda\xa3\x65\x57\xce\xc4\x25\xb4\x7e\x3d\xcf\xef\xb6\xe1\xfc\x4e\x1d\xff\xac\x7d\x6a\x7e\x67\x57\xe0\x3c\xbb\x04\x89\xf6\x49\xe9\xed\xc8\x66\x55\x9f\xe7\xb9\x1e\x5d\x5e\xbc\xff\xf1\x2f\xfd\x8a\x1b\xf3\xa4\x74\x3e\x2a\x79\xc6\xb5\x92\xfd\xfc\x61\x34\xec\x57\x4a\x15\x29\xe1\x39\x3a\x1f\x0e\xfb\x22\x2f\x30\xb5\xa2\x44\x55\xdb\xd1\xf9\x07\xc2\xd1\xcd\xf4\x4b\x58\xab\x53\xf3\xb5\x38\xcd\xb5\x78\x44\x7d\xe6\x0e\x21\x37\xb2\x73\xd8\x58\x9a\x49\x9d\x67\x34\x7f\x2f\xbb\xfb\x7e\xee\x7c\x4c\x2d\x51\xe2\xf7\x03\x48\xe9\x38\x5c\x4c\x03\xda\x62\x5e\x44\xe2\xea\xb2\x09\x39\x53\x6a\x2b\x10\x68\x82\xb1\x71\x18\x7e\x0c\xfc\x6e\x27\x14\x69\x21\xb6\x98\x56\x4a\x0a\x34\xcf\x13\x8c\xe6\x6e\x87\x97\x90\x6e\x81\x33\xed\xb8\x3f\x4a\x57\x33\xb1\x5a\x83\xb1\x3f\x5e\x46\xfe\xd1\x1c\x6b\x99\x6b\xd0\xb6\xf7\xbf\xd0\x75\x94\xf4\x17\x6e\x08\xc6\x7e\x92\x36\x56\x8e\x5b\x4a\x73\xfb\xcd\x18\x08\x47\x10\xd2\xa2\x7e\xe4\xc5\x0b\x23\xef\x2f\x86\x43\x76\x33\x4e\x83\x45\xe2\x47\xbf\x7a\xb3\x34\x09\x5c\x54\xee\xfc\xd9\x46\x21\x56\xe8\xac\xbc\x50\xfe\x70\xf1\xc3\x70\xc8\x62\xdf\x2d\x90\xe9\x2c\x98\xfa\x9d\x7a\xf3\xe4\x0a\xc6\xcf\xb0\xb9\x51\x3a\x8e\xa3\x29\xa3\x8f\xf4\x25\x88\x69\x66\xf4\xca\x31\x3f\xab\xb5\xb0\x6e\xd7\x78\xf3\x66\x7c\xeb\x2d\x6e\x7c\x48\x6e\x83\x18\x92\x10\x3e\xfa\xfe\x1d\xdc\x87\xcb\x08\xdc\x72\x35\xf1\x12\x0f\x62\x6f\xea\xbf\x79\xc3\x62\x7f\x1c\xf9\x49\xfa\xd1\xa7\x5a\x7d\xf3\x7f\x3f\x4f\x27\xfe\xa7\xc8\xff\x14\xfd\xff\x9f\x4e\x58\xb0\x88\x13\x6f\x36\x4b\x67\xe1\xf8\xe3\x11\xb8\x5e\x6d\xd5\x69\xa1\xd6\x42\x82\xc6\x12\x5d\xd7\xa3\x0a\xa5\xf6\x1c\xd0\x7a\x3f\xf7\xe7\xd7\x7e\xf4\xdc\xaf\x5a\x8f\xe9\xee\xe7\xd7\x81\x9d\x4d\x33\x2c\xd0\x58\xc1\x3b\x81\x83\xe6\x0b\xa9\xa2\x96\xfc\x7f\x25\xda\x4d\xf6\x2e\xd7\x4d\xb3\xcb\x45\x46\x0d\x87\xb6\x27\x68\x9c\xa5\x1d\xba\x36\x5d\xe2\x1b\x67\x69\x2d\xa6\x17\x8f\x8e\x01\x8d\xdd\xff\xf2\xac\xf3\xc9\x99\x4a\x5b\x53\xec\xb3\x38\xff\x20\xbf\xb0\x99\xb7\xb8\xa1\x50\x51\x9e\x2e\xe3\xfe\x4a\x9f\x4e\x23\xb7\xd2\xd2\x99\x2f\xd7\x85\x30\x9b\xfe\x54\x73\xf9\xef\x7f\x71\x41\x5a\x99\x6e\x7b\x54\xe3\xbd\xae\xa5\xdb\xd1\xe8\x18\x2c\x37\x5b\x03\x15\x6a\xa1\x28\x84\xa2\xd8\x0f\x5a\x97\x27\x47\xdd\xb4\x96\xc7\xd2\x6e\x31\xbd\x21\xb4\x9a\xd5\xd4\x0c\xdc\xbb\x91\x97\x50\x0c\xd1\xf3\x82\x47\xbc\x2a\x90\xcb\xba\x7a\xde\x3c\xf7\xc0\x75\xb6\x11\x8f\x68\x1a\xbf\x06\xf4\x24\x6d\xcf\xd2\xac\x11\xff\xf2\xda\x9e\xf3\x23\x1e\xdf\xfa\x93\xe5\x8c\x60\xf9\xb9\xe9\xff\xef\x7e\xa0\x37\x93\x84\x8a\x26\xaf\xb5\x1b\x18\x94\x0d\xb7\xf1\xd1\x46\xd4\x9a\x05\xb3\x51\x75\x91\xd3\x2a\xe7\x2e\xc0\x9c\x85\x33\xea\x26\xc9\xad\x47\x0b\x11\x99\x61\x9f\x4b\xae\xb7\xb9\x7a\x3a\x46\x6a\xc3\x75\xde\x4c\xdb\x07\x8d\x7c\x0b\xb8\xb3\x28\xa9\xce\xba\xac\xde\x7a\xd1\xc4\xcd\xdb\xf4\x3a\xf2\xbd\x63\xd6\xce\x84\x71\x53\x3f\xab\x8d\x55\x25\xcd\xbc\xd3\x38\xdb\x60\x89\xf4\xfa\xc4\x2d\x70\x8d\xc0\x69\xe3\xc0\x9c\x96\xb8\x42\xc8\x0e\x58\x8d\x32\x47\xb7\xae\xcf\x5b\x8f\xa8\xaf\x2b\x0d\xb8\xe3\x25\xad\x90\x6b\x61\xfb\x25\x5f\x4b\xb4\x6c\xbc\x8c\x93\x70\x4e\x2f\x96\x29\xa1\xe3\x28\x70\x74\xb9\xeb\xff\x07\xa7\xdb\x9b\x9f\xc1\x68\x6e\xc2\xfc\x0c\x73\x61\x1b\x3f\x8e\xae\x8c\xbb\xdd\xf5\xc8\x80\x7b\xe9\xe2\xcd\x7e\x3b\x80\x44\xb5\x26\x9a\xe9\x08\x4f\x67\xea\x59\x98\xac\x75\x90\xf6\xe1\xef\xb5\xb1\x50\xd5\xb6\x53\x66\xd3\x60\xe6\xa7\xfe\x6f\x89\xbf\xa0\x9e\x44\xcc\x1d\x94\x79\x7f\x70\xd0\x18\x94\xed\xd7\x36\xa7\x76\x53\x72\x6d\xf7\x15\x97\xd6\x7c\x39\xa2\x67\x03\xf6\x34\xf2\xc6\x49\x6b\xc4\x11\x65\xe2\xc5\xb7\xfe\xe1\xd7\xcc\x4b\x7c\x9a\xda\xc7\x67\xde\xe2\x66\xe6\x4f\xd2\x5f\x96\x61\x72\x38\xfc\x4f\x00\x00\x00\xff\xff\x98\x02\x53\xa1\x3f\x10\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 4159, mode: os.FileMode(420), modTime: time.Unix(1495141430, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enUsIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x57\xdd\x6e\xe3\x3a\x0e\xbe\xf7\x53\x10\x01\x16\x7b\x73\x90\x07\x38\xc0\xb9\xe8\xc9\x74\x66\x0a\x4c\x67\x8a\xfe\x2c\xb0\x28\x06\x82\x22\xb1\xb6\xb6\xb6\x64\x48\x74\xd3\xbc\xfd\x82\xfa\xb1\x95\x38\x39\x57\xb1\x3e\x7e\x9f\x28\x91\x14\xa5\xbc\xf6\xae\x35\xf6\x77\x43\x86\x7a\x84\xbf\x60\xf3\x64\x5a\x0b\x77\x76\xd3\x04\xd3\x5a\x61\xec\x09\x36\x05\xf4\x56\x0e\x91\xf8\x92\xbf\x17\x54\x8c\xbd\x54\xd8\xb9\x5e\xa3\x67\xc6\x7f\xdd\xe4\xa1\x18\xb7\x9b\x06\x07\x69\x7a\x36\xdc\xf2\x47\x1e\x5f\x14\x45\xcb\x76\xd3\x8c\x32\x84\x83\xf3\x9a\x0d\x0f\xf9\x7b\x41\x2f\x4a\xad\x51\x08\x85\xb1\xdd\x34\x1e\x47\x94\x24\xae\x69\x6e\xac\x06\xea\x10\x02\xef\xca\x59\x84\x0e\x3d\x46\xd9\x80\xc3\x1e\xbd\x48\x9b\x7d\xcc\x43\xe0\xfd\x36\xaf\x1e\x5b\x13\x08\x7d\x15\xb7\xc7\x0c\xb1\x34\x7d\x9d\xa2\xd6\x91\x90\x7d\xef\x0e\xa8\x17\x83\x97\x64\x9c\x05\xeb\x08\xb2\x8d\x67\x7f\x73\x7e\xf8\xbd\xec\x92\x95\x83\x24\xd5\xd5\x51\x08\xa0\x1d\x06\xfb\x6f\x82\x68\xaa\x93\x50\x74\xc6\x2a\xe7\x3d\x2a\x62\xdd\x9d\xfd\x90\xbd\xd1\x73\x3a\xc0\xf9\x39\x4a\x95\x78\x8f\x68\x05\xc9\x77\xb4\x75\x8a\x41\xf6\x1e\xa5\x3e\x42\xb4\xfc\x01\xc1\x79\x7f\xac\x54\x1e\x03\xfa\x8f\xb4\xb1\x59\x53\xc0\x3f\x60\xec\x51\x06\x04\xd5\x39\x17\x10\xa4\x75\xd4\xe1\x52\x18\x27\x4b\x27\x42\x6f\xc5\x59\xac\x56\x6b\xcf\xbc\x4d\x13\xe4\x47\x2a\x5a\xfe\x55\x9d\xb4\x2d\x86\x4d\x73\x7b\x52\x67\x7f\x42\xa9\x34\xf4\xde\xf9\x7a\xc2\x54\x90\x1c\x6e\x49\x9b\xc6\xd8\x85\x01\xc3\x14\x08\xf6\xa9\x24\xdc\xdb\x9f\xf0\xaf\xc0\x99\x09\x48\x64\x6c\x1b\xaa\xbc\xf3\x7e\xa1\xe0\x9b\x66\x1a\xb5\x24\x14\xa3\x77\x6f\xa6\x47\x11\x26\xa5\x30\x84\x98\xb9\x04\x01\xaf\x59\x43\x36\xbc\x4d\x7d\x7f\xac\x67\x2e\xca\xca\xc3\x2c\x9c\x9d\x34\xaf\xad\xa1\x4f\x12\x16\x0f\x15\xef\x27\x1e\xa0\x35\xb4\xa5\x4f\xda\x34\xac\x08\x42\x39\x4b\x68\x49\x28\x69\x39\xa6\x38\x8c\x74\x64\xea\x2e\xe1\xe0\xde\x20\x12\x21\x11\x78\xc3\x91\xb3\x69\x62\x24\xc4\xc9\x2c\x31\xd0\x9d\x9b\x7a\xcd\x65\xb7\x50\xf3\x6a\x7e\x37\x1a\x83\xf2\x66\xe4\x92\x3e\x3f\x66\x5f\x16\xd3\x76\xbb\x4d\xcb\x8b\xb3\x5f\xea\x1b\x5f\x33\x0e\x07\x43\x1d\xe0\x27\xa1\x0d\xc6\xd9\xac\x2a\x7b\x3a\x13\x95\x2d\xe5\xf3\xcb\x51\x16\xa3\x37\x1f\x92\x96\x0a\xc9\xe3\x62\x9d\xf6\xbd\x51\x8b\x31\x0e\x37\x8d\xd4\x9a\x03\x1b\x57\x17\x3b\x84\xd6\x60\xf1\x10\x03\xb5\x84\xfe\xc3\x9c\xc4\xfe\x3f\xa6\x0e\x7e\x21\xf5\x26\x50\x45\xfa\x61\x42\x0c\x79\xe6\x55\x89\x44\x6d\x6a\xe2\xad\x36\xb4\x9e\xad\x65\x4e\xca\x8b\xb1\x86\x84\xc7\xd1\x05\x43\xce\x1f\x53\x4d\x1b\x82\x0a\x8a\xc4\x92\x47\x8f\x83\xfb\xc0\x33\xc5\x2e\xe5\x3c\xd9\x2a\xe9\xa6\x51\x9c\xe4\x78\x0a\xdd\x98\x3a\xc1\x8e\x91\xd8\xa7\x22\x52\x93\xf9\x5b\x70\xa7\x99\x46\x12\xce\x2f\x45\xf6\xb8\x78\xcb\x66\xd4\xdc\x76\x4e\x2a\x4c\x79\xe4\xf3\xb2\xef\xdd\x3e\xee\x3c\x1e\xc0\x08\x1a\xdb\x02\xc3\x85\xd9\x22\x09\x63\x35\x7e\x2e\xbc\x36\x9d\x08\xb8\x63\xb8\xf0\x38\x7f\x68\x29\xed\x31\xf1\xa4\xd6\x4c\x8b\xe8\x66\x0e\xa1\xc6\x4f\x71\xf0\x86\x50\x90\x47\x5c\xd8\x87\x8e\x33\xcf\x16\x16\xb1\xad\x68\x7a\xe7\xde\xa7\xf1\x8c\x9e\xc0\x13\x1e\x2f\xb5\x43\xa9\x4f\x56\x0a\x8c\x9c\x33\x84\x72\xc3\x60\x68\x4d\x84\x64\x98\xc3\x34\xd3\x52\x8b\x2a\xd6\xe6\x55\xea\x81\xef\x6f\x2d\x43\xb7\x77\xd2\xeb\x6d\x38\x06\xc2\x41\x04\x92\x34\x71\xe3\x79\x8a\x63\xb8\x77\x96\x73\x01\x4f\x11\xaf\xf8\xa5\xea\x6e\x78\x22\xf8\x52\xf0\x7a\x46\xee\xe3\x5e\x4c\x23\x99\x78\x1b\x3e\xc5\x31\xbc\xc4\x71\xc5\x53\x93\xf7\x7c\x32\x5b\xe7\xdd\x44\xc6\x32\x77\x97\x30\xf8\x56\xb0\x70\x41\x30\xe0\xe0\xfc\x51\x4c\x41\xb6\xb5\xe6\x3e\xc2\xf0\xc2\x70\xbd\x60\x47\xb2\x2f\x1a\xbe\x26\x94\xa4\x78\x51\x3c\xb3\xa1\xa8\x6e\x8a\xa1\x52\x66\x8d\xdb\x93\x34\x36\x4a\x32\xf9\x57\x46\x2a\xee\xe8\x8c\x25\x5c\x72\x6e\x06\xe4\x68\x3e\x24\x18\x7e\xa4\xac\x3f\x33\xbc\xf6\x50\x56\x35\xcb\xce\x16\x75\x4d\xf7\xe6\x71\xa5\xf9\xca\xd5\x76\xce\x2f\x91\xeb\x50\x8e\xab\xb8\x7d\x47\x39\xae\xa2\x16\x99\xeb\x00\x44\xee\xf5\x28\xd4\x2a\xa3\x63\x9d\xd4\x8a\x3b\xdd\x5f\xf3\x61\xac\x98\xc2\x8a\x6f\xe1\x25\x5c\x53\x78\x8c\xef\x84\xf3\x55\x3d\x66\xf8\x5c\xe5\xf6\xff\x43\x45\xa1\xb0\x7f\xa5\x61\xc5\xda\x3b\x47\xfc\xc4\x1a\xf9\x2c\xa8\xf7\x39\x4c\x7f\x17\x9c\xcf\x82\x7a\x5f\x45\x2a\xb1\xd7\xa1\x4a\xec\xeb\xb1\x1a\xc2\x28\xad\x08\xe4\x27\x45\x93\xc7\x30\x3b\xbc\x7f\x1a\xa5\x85\xa7\xd9\xb0\xf2\xb8\x52\xd6\x15\x7a\x2e\xbe\xe4\x59\x49\xd5\xe1\x45\xd7\x3b\xb6\xfc\xa3\xef\x95\xb6\x76\xbe\x92\x5f\x3a\x29\xf1\x7d\x62\x6c\x2b\xf6\x93\x7a\xe7\xc6\x26\x43\x27\x48\xee\x7b\xac\xe7\x7a\x28\x34\xf8\x3b\xd2\xe0\xbb\x0c\x1d\x3c\x33\xed\xd2\xac\xad\x12\x03\x92\xd4\x92\x64\x3d\xcb\xb7\x1d\xdc\x67\xf8\x92\x2a\x3e\x2d\x45\x6e\x81\xf9\x14\xf2\x73\xa4\x9a\xe1\x57\x7c\x7d\xe6\xae\x78\x33\x53\x2e\xcd\x66\x91\xaf\x5d\x25\x3c\xaa\xa3\x8a\xc5\xff\x13\x3f\x89\xd7\xf0\x98\x90\x8a\xdb\xcb\x10\xb9\xa5\x47\x1a\xab\x10\x7e\xc8\x10\xe9\xcf\xa7\x8d\x32\x75\xb0\x85\x9c\x1a\xd7\xb7\x1d\x3c\xc8\x29\x5c\x24\x8e\x32\x1d\xa6\xab\xcc\xe2\xbe\x10\x8b\xe7\x73\x5e\x76\x1a\x52\x28\x53\x5b\x69\x86\x74\x37\x6c\x95\x77\x7c\xdb\xef\xf8\xe7\x59\x86\xf7\x30\x5b\xf2\x9f\xbe\x9f\x72\xc0\x19\x0b\xaa\x43\x3d\xc5\xb0\x3c\xe5\xcf\x85\xcf\x71\xca\xe1\x8a\x9b\x2f\x86\xd1\xe3\x87\x71\xf1\x62\x7a\x28\x9f\x27\x04\xfc\x44\x35\x55\x9d\xf3\x36\x8d\xf3\x52\x97\x69\x5c\x7e\x57\x3f\x4e\xd6\x72\x51\x3d\x24\xa4\xe2\xf0\x73\x14\xfe\x82\xea\xe9\xb9\x2c\x9d\xa4\xa7\x74\xa4\x3d\x5d\xf7\x3f\xbb\xe7\xfa\x60\xd6\xff\x03\x00\x00\xff\xff\xdd\x1c\xdd\xa6\x2e\x0f\x00\x00")

func confLocaleLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enUsIni,
		"conf/locale/locale_en-US.ini",
	)
}

func confLocaleLocale_enUsIni() (*asset, error) {
	bytes, err := confLocaleLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-US.ini", size: 3886, mode: os.FileMode(420), modTime: time.Unix(1495521005, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_frFrIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func confLocaleLocale_frFrIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_frFrIni,
		"conf/locale/locale_fr-FR.ini",
	)
}

func confLocaleLocale_frFrIni() (*asset, error) {
	bytes, err := confLocaleLocale_frFrIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_fr-FR.ini", size: 0, mode: os.FileMode(420), modTime: time.Unix(1493941287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
	"conf/locale/locale_en-US.ini": confLocaleLocale_enUsIni,
	"conf/locale/locale_fr-FR.ini": confLocaleLocale_frFrIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-US.ini": &bintree{confLocaleLocale_enUsIni, map[string]*bintree{}},
			"locale_fr-FR.ini": &bintree{confLocaleLocale_frFrIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

