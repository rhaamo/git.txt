// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/locale/locale_en-US.ini
// conf/locale/locale_fr-FR.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\xed\x72\xdb\xba\xd1\xfe\x8f\xab\xd8\xe8\x9d\xbc\xc7\xee\xc8\xb6\x1c\x9f\x3a\xae\x15\x75\x0e\x2d\x51\x36\x27\x92\xa8\x92\x54\x72\xdc\x4c\x86\x81\xc9\xa5\x84\x31\x08\x30\x00\x68\x4b\xfd\xd1\xdb\xe9\x85\xf4\xc6\x3a\x00\x49\x59\x4e\x3a\xd3\x93\xcc\x48\x36\xb0\xbb\xd8\x7d\x9e\xfd\xb2\xb7\x5c\xa6\x0b\x6f\xee\xc3\x08\xd6\xcc\x9c\x9a\xad\x21\x63\x6f\x91\x46\xfe\x6d\x10\x27\x7e\x04\x23\x30\xaa\x46\xe2\x2d\xc2\xc5\xfd\x3c\x5c\xc5\xe9\x38\xf2\xbd\xc4\xef\xce\xc9\x17\x8d\xea\x09\xd5\x57\xb2\x8c\xc2\x24\x1c\x87\x33\x18\xc1\xc6\x98\x8a\x4c\xc2\xb9\x17\x2c\x60\x04\x5c\x66\x94\x6f\xa4\x36\x24\x0a\xc3\x24\x5d\x45\x56\xe4\xed\x51\x27\x7f\xac\xaf\xcf\xce\xde\x1e\x35\xe2\xc7\xfa\xfa\xed\xd1\x5d\x92\x2c\xd3\x65\x18\x25\xc7\xfa\x8c\xac\x16\xc1\xef\x69\x1c\x8e\x3f\xfa\x49\xba\xf4\xa3\x79\x10\xc7\x41\x68\xcd\x5e\x5e\x5e\x12\x27\xe9\x4d\x26\xd6\xcd\xc1\xa9\xfb\x4f\xf6\xda\x30\x82\x5f\x07\x83\x01\x99\x04\xb1\x77\x33\xf3\xd3\x28\x5c\x25\x7e\x94\xce\xc2\x5b\x18\x41\x41\xb9\x46\x32\x84\x55\x55\xa1\x02\x8e\x4f\xc8\x41\x16\x60\xb0\xac\x38\x35\x08\x54\xe4\xa0\x0d\x35\x2c\x83\x82\x71\x84\x8a\x9a\x0d\x19\x42\x8e\x05\xad\xb9\x01\xa6\xc1\x6c\x9a\x53\x78\xde\xa0\xc2\x0e\x3c\x7b\x83\x5b\xcc\x6a\x83\x39\x89\x13\x2f\x09\xc6\xa9\x0b\x7b\xe9\x25\x77\x30\x22\xe4\x4b\x4e\x0d\x7d\xa0\x1a\xbf\x92\x21\xf8\xcc\x6c\x50\x41\xaf\xdc\xe9\xef\xbc\xd7\x87\x5e\x25\xb5\x59\x2b\xd4\x3d\x90\x0a\x7a\xfa\x3b\x67\x06\x2f\x7a\x7d\xd8\xc9\x1a\x32\x2a\x20\x93\x42\x60\x66\xc0\x48\x48\xd8\xe4\x06\x9e\x99\xd9\xc0\x7c\x17\xff\x6d\x06\x95\x92\x46\x66\x92\x93\xc9\x4d\x9a\xdc\x2f\x2d\x43\xad\x3e\xb9\x0b\x63\x8b\xc6\xf9\xbb\xf7\x0e\xa3\xf3\xeb\x8b\x8b\xc1\x25\xe9\x58\x97\x6b\x4d\x56\xb1\xa3\x5a\x49\x69\xc8\xd2\x8b\xe3\xcf\x13\x18\x91\x21\x4c\xad\x17\x07\x3e\x09\xbe\xeb\x03\xb6\x4e\xe7\x4c\xd3\x07\x8e\xd6\x6d\x85\xdf\x6b\xa6\xb0\xf1\xfa\x09\x15\x2b\x76\x27\x45\xcd\x79\x8f\xc4\xf1\x2c\x9d\x87\x13\xfb\x50\x2b\xdf\x99\xed\x82\x73\x50\xf7\x0c\xcb\x1f\x7a\x7d\xa8\x35\x02\x7d\xd0\x92\xd7\xe6\x05\x5d\xe1\xc2\xd7\x86\x2a\x03\x54\x83\x4d\x38\x96\x21\x69\x10\xed\x80\x3f\xcd\x1f\x08\xf9\xa2\xb0\x92\x9a\x19\xa9\x76\x16\xde\x48\x4a\xd3\x58\x29\xa4\x02\x6d\xa4\x62\x62\x0d\x7b\x19\x86\xfa\x17\x0d\x96\x8f\xfe\x21\xb1\xbd\x7f\x9e\x7d\xa8\x35\x2a\x41\x4b\xfc\xeb\xd9\x9a\x99\xad\x39\x39\xd4\xe9\xb9\x3c\x76\xf8\x04\x85\x73\xed\x99\x0a\x47\x49\x1b\x21\x64\x5c\x0a\xfb\x52\xad\xed\xa7\x4d\xc8\x7d\x12\xba\xec\xbc\x0d\x92\x83\x14\xbc\x6f\xb9\xd5\x15\x66\xac\xd8\x81\x05\xae\xf1\xda\x48\x1b\x1d\xb0\x02\x84\x14\x27\xda\x50\x91\x53\x95\x93\x21\xdc\x32\x03\x0f\x4c\x50\xb5\xb3\x0e\x5b\x5a\x2c\x72\xb9\x0b\xd3\xbe\xe0\xd4\xea\x8a\x4b\x9a\x9f\x54\x34\x7b\x84\xa3\x6c\x83\xd9\xa3\xac\x0d\xc8\x27\x6c\x64\x8e\xc9\x6d\x90\xa4\x37\xc1\xc2\x8b\xee\x1b\x18\x09\xf9\xc2\xe5\xfa\x2b\x79\x95\xaf\x43\x18\x53\x01\x0f\x08\xbd\x4c\x0a\x2d\x39\xb6\x84\xd9\xaa\xe8\xbd\xc6\xad\x13\xb0\x65\xa5\x11\x32\x59\x96\xd4\xc6\xa0\xb1\xa2\xca\x16\x55\x59\x73\xc3\x2a\x8e\x50\xca\x1c\x75\x1f\xf0\x74\x7d\xba\x57\xeb\xbb\x42\xeb\x91\x36\x5b\xda\x53\x32\x84\x9b\xba\x28\x5c\x8d\x8a\xb5\xd9\xd8\x22\xcd\x36\x54\x08\xe4\x7d\x78\x44\xac\x80\xb9\xa4\x60\xce\x05\xd6\xf0\x91\x4b\xf1\x8b\x81\x47\x21\x9f\xe1\x79\x43\x4d\x73\x79\x4a\x6e\x56\xd3\xa9\x6d\x00\xbe\x6d\x1f\xe7\x83\xc1\x41\x01\x26\x8a\x66\x2e\x93\x03\x51\x48\xfb\xfd\x99\x2a\x61\xbf\x7d\xa5\xa4\xb2\x3f\x4c\xa9\xa1\xfc\x87\x80\x1b\x2d\x32\xf3\x3f\xf9\xb6\xa7\xb9\x5f\x49\x97\xdf\x7b\xb8\x6c\xb0\x8e\x23\x07\xef\x69\x7b\x6e\xf3\x93\x23\x7d\x42\xc0\xb2\x32\x3b\x8b\x13\x13\x1b\x54\xcc\x74\xf6\xf6\x96\x1c\x2e\x3f\x9a\xb1\x87\x7f\xc0\xc6\x10\x92\x8d\x6d\x49\xc2\x26\xa6\x06\x5a\x1b\x59\x52\x83\x39\x70\xb9\x06\x25\x8d\xa5\xe5\x48\x3f\x33\x93\x39\x68\x0b\xc9\xb9\x7c\xb6\x59\x2b\x2b\xc3\xa4\xd0\xc7\x64\x16\xde\xa6\x51\x98\x1c\xf4\xfc\x21\xc4\xb8\x2e\x51\x18\x67\x24\xa7\x8c\xef\xc8\xc4\x0b\x66\xf7\x3f\xc9\xcd\xe9\x16\x34\xfb\x07\x82\xde\xb0\xc2\xd8\x07\x6c\x45\x70\x74\x54\xbf\xc2\xf2\xdd\x15\x94\x48\x85\x86\x73\xf8\xf0\x01\xde\x5d\xf5\xe1\xdd\x9f\x2f\xe7\x37\x64\xee\xfd\x9e\xc6\xc1\xdf\xfd\x34\xbe\x0b\xa6\xb6\x6a\xde\x5d\xb5\x76\x39\x13\x08\xa2\x2e\x1f\x50\xfd\x60\xd8\x29\xcd\x82\x85\x1f\x37\x3c\xdb\x7f\x96\xeb\x6d\xc5\x14\xe6\x90\xd3\x9d\xb6\x1a\xd6\x79\xd7\xdb\x8f\x72\xe4\x68\x7b\x7e\x61\x50\x41\x49\xb7\x4e\xe4\xd8\x99\x99\x78\xf7\xd6\xca\xfb\x3d\x19\x9a\xd3\xec\xf1\x27\x36\xdc\xe9\x1f\xa2\xe3\x33\x3e\x6c\xa4\x7c\x84\x55\x34\x23\x6e\x14\x36\x55\x77\xba\x95\xaa\x74\x23\xc1\x31\xd5\x38\xe6\xf8\x61\x52\x90\x1f\x71\x8d\x1a\xe2\xf0\x09\xd5\xce\x3a\xdb\x0a\xa4\x8e\x85\x9f\xc4\xa4\xc8\x5a\x83\x8e\x0b\xdc\x66\xa8\x35\x6a\xd8\xc2\x01\xc0\xfb\x92\x98\xd3\x2d\x2b\xeb\xb2\x81\xc9\xc8\xa6\xc8\xb8\x5c\xaf\x51\x39\x23\xfa\x10\x97\x0b\xb7\x00\x68\xcd\xa4\x78\x35\xcf\xb0\x94\x6a\x67\xcb\xa6\x6d\x13\x16\x39\x85\x39\xd3\x3f\x54\x50\x2b\x68\x97\x87\x4f\xc1\xc4\xcd\x20\xc7\xe0\x10\x96\x4a\x3e\xb1\x1c\x95\x6d\x04\x05\xdb\xe7\x23\x19\x42\xa3\x73\x0d\x42\x1a\xd8\x58\xb4\xa9\xd8\x75\x52\x3b\x34\x64\xe8\x4c\x5c\x43\xeb\xd7\xcb\xfc\x6e\x1b\xce\x37\xdb\xf1\xcf\xda\x5b\xfd\x8d\x0c\xc1\x79\x76\x0d\x02\xcd\xb3\x54\x8f\x23\x93\x55\x7d\x9a\xe7\x6a\x74\x7d\x79\xf1\xfe\x2f\xfd\x8a\x6a\xfd\x2c\x55\x3e\x2a\x69\x46\x95\x14\xfd\xfc\x61\x34\xe8\x57\x52\xf2\xd4\xe2\x39\x3a\x1f\x0c\xfa\x2c\xe7\x98\x1a\x56\xa2\xac\xcd\xe8\xfc\xca\xe2\xe8\x66\xfa\x35\xac\xe5\x89\xfe\xce\x4f\x72\xc5\x9e\x50\x9d\xb9\x43\xc8\xb5\xe8\x1c\xd6\xc6\xce\xa4\xce\x33\x3b\x7f\xaf\xbb\xf7\x7e\xeb\x7c\x4c\x8d\x4d\x89\x6f\x7b\x90\xd2\x71\xb8\x98\x06\x76\x8b\x79\x15\x89\xab\xcb\x26\xe4\x4c\xca\x47\x86\x60\x27\x18\x19\x87\xe1\xc7\xc0\xef\x76\x3c\x96\x72\xf6\x88\x69\x25\x05\x43\xfd\x32\xc1\xec\xdc\xed\xf0\x62\xc2\x2d\x70\xba\x1d\xf7\x07\x74\x35\x13\xab\x35\x18\xfb\xe3\x55\xe4\x1f\xcc\xb1\x36\x73\x35\x9a\xf6\xfd\x57\xba\x2e\x25\xfd\x85\x1b\x82\xb1\x9f\xa4\x8d\x95\xc3\x96\xd2\xbc\x7e\x3b\x06\x8b\x23\x30\x61\x50\x3d\x51\xfe\xca\xc8\xc5\xe5\x60\x40\x6e\xc7\x69\xb0\x48\xfc\xe8\x93\x37\x4b\x93\xc0\x45\xe5\xce\x5f\x6c\x70\x56\xa0\xb3\xf2\x4a\xf9\xea\xf2\xd7\xc1\x80\xc4\xbe\x5b\x20\xd3\x59\x30\xf5\x3b\xf5\xe6\x66\x08\xe3\x17\xd8\xdc\x28\x1d\xc7\xd1\x94\xd8\x8f\xf4\x35\x88\x69\xa6\x55\xe1\x32\x3f\xab\x15\x33\x6e\xd7\x78\xf3\x66\x7c\xe7\x2d\x6e\x7d\x48\xee\x82\x18\x92\x10\x3e\xfa\xfe\x12\xee\xc3\x55\x04\x6e\xb9\x9a\x78\x89\x07\xb1\x37\xf5\xdf\xbc\x21\xb1\x3f\x8e\xfc\x24\xfd\xe8\xdb\x5a\x7d\xf3\x7f\xbf\x4d\x27\xfe\xe7\xc8\xff\x1c\xfd\xff\x9f\x8e\x48\xb0\x88\x13\x6f\x36\x4b\x67\xe1\xf8\xe3\x01\xb8\x5e\x6d\xe4\x09\x97\x6b\x26\x40\x61\x89\xae\xeb\xd9\x0a\xb5\xed\x39\xb0\xeb\xfa\xdc\x9f\xdf\xf8\xd1\x4b\xbf\x6a\x3d\xb6\x6f\xbf\xac\xf7\x5b\x93\x66\xc8\x51\x1b\x46\x3b\x81\xbd\xe6\x2b\x29\x5e\x0b\xfa\xbf\x88\x76\x93\xbd\xe3\xba\x69\x76\x39\xcb\x6c\xc3\xb1\xdb\x13\x34\xce\xda\x1d\xba\xd6\x1d\xf1\x8d\xb3\x76\x2d\xb6\x7f\x48\x74\x19\xd0\xd8\xfd\x2f\x77\x9d\x4f\xce\x54\xda\x9a\x22\x5f\xd8\xf9\x95\xf8\x4a\x66\xde\xe2\xd6\x86\x8a\xe2\x64\x15\xf7\x0b\x75\x32\x8d\xdc\x4a\x6b\xcf\x7c\xb1\xe6\x4c\x6f\xfa\x53\x45\xc5\xbf\xff\x45\x99\x26\xff\x09\x00\x00\xff\xff\x75\x7a\x5f\xf7\xe7\x0c\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 3303, mode: os.FileMode(420), modTime: time.Unix(1494397439, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enUsIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xcb\x8a\xec\x36\x10\xdd\xfb\x2b\x0a\x6f\xb2\xb9\xf4\x07\x04\xb2\x08\x93\x09\x0c\x84\x10\x26\x24\x10\x86\x41\xa8\xad\x1a\xbb\xb8\xb2\x64\x4a\xe5\x7e\xfc\x7d\x28\xc9\x0f\xb9\x67\xee\xaa\xe5\xf3\x50\xab\x4e\x95\xf4\xe6\x63\x4f\xe1\xbd\x11\x12\x8f\xf0\x0b\xb4\x7f\x53\x1f\xe0\x25\xb4\x4d\xa2\x3e\x18\x0a\x07\x6c\x4e\xc8\xc1\x8e\x59\xf8\xcf\xb2\xde\x51\x33\x79\xdb\xe1\x10\xbd\x43\x56\xc5\x7f\x71\x66\x58\xc9\x53\xdb\xe0\x68\xc9\x2b\xf1\xac\x8b\xe5\xfb\x4b\x53\x66\x4e\x6d\x33\xd9\x94\xae\x91\x9d\x12\x7f\x2d\xeb\x1d\xfd\xd2\x1a\xa8\x43\x58\x15\xa7\xb6\x61\x9c\xd0\x8a\xf9\x91\xe7\xd7\xe0\x40\x06\x84\xa4\x55\xc5\x80\x30\x20\x63\xb6\x8d\x38\x9e\x91\x4d\x29\xf6\x75\xf9\x04\xad\xb7\x79\x63\xec\x29\x09\x72\x95\xdb\xeb\x02\xa9\xb5\xac\x8e\x68\x88\x62\xac\xf7\xf1\x8a\x6e\x27\xd8\x0a\xc5\x00\x21\x0a\x2c\x9c\xee\xfe\x11\x79\x7c\xdf\xab\x54\xe7\x68\xa5\x1b\xea\x14\x12\xb8\x88\x29\xfc\x24\x90\xa9\xba\x09\xab\x8f\x42\x17\x99\xb1\x13\xf5\xbd\x84\x8b\xf5\xe4\xb6\x76\x40\xe4\x2d\xa5\xca\x7c\x46\x0c\x46\xec\x77\x0c\x75\x8b\xc1\x7a\x46\xeb\xee\x90\x99\x6f\x90\x22\xf3\xbd\x72\x31\x26\xe4\x4b\x29\x6c\xf3\xac\xe0\x37\x98\x3c\xda\x84\xd0\x0d\x31\x26\x04\x1b\xa2\x0c\xb8\x0f\xc6\xe1\xe8\x22\xc8\xc1\x3c\x64\xf5\xe9\xec\x8b\xae\x6d\x92\xbd\x94\xa1\xd5\xdf\x6e\xb0\xa1\xc7\xd4\x36\xcf\x87\x39\xfb\x19\xd6\x49\x43\xe6\xc8\xf5\x86\x65\x20\x35\x6e\x2b\x1a\x7c\x42\x11\x0a\x7d\xaa\xda\xaa\xe5\xc0\x8a\xb7\xcd\x3c\x39\x2b\x68\x26\x8e\x1f\xe4\xd1\xa4\xb9\xeb\x30\xa5\xdc\x98\x02\x81\x1e\xc9\xc1\x42\x7c\xcc\xde\xdf\xeb\x9d\x57\x67\xf5\x0f\x9b\x71\xfb\x93\xe6\xad\x27\xb9\x89\x09\x78\xad\x74\x7f\xe2\x15\x7a\x92\x93\xdc\xa4\x6d\xd4\x91\x4c\x17\x83\x60\x10\xd3\xd9\xa0\x91\xe1\x38\xc9\x5d\xa5\x4f\x05\x87\xf8\x01\x59\x08\x45\x00\x67\x84\xac\x69\x9b\x1c\x85\x39\xec\x92\x73\x1c\xe2\xec\x9d\x4e\xd5\x2e\x5d\x4e\xf3\xde\x38\x4c\x1d\xd3\xa4\x13\xfb\x78\x8b\x7e\xdb\xa9\xd3\xe9\x54\x8e\x97\x77\xff\xea\x59\xf8\x7d\xc1\xe1\x4a\x32\x00\xde\x04\x43\xa2\x18\x16\xd7\x5a\xd3\x83\x69\x2d\x69\xb9\x9e\x9a\xb2\x99\x98\x2e\x56\xf6\x01\x58\xbe\x57\x76\x3e\x7b\xea\x76\x32\x7f\xb6\x8d\x75\x4e\x83\xcd\xa7\xcb\x0f\x80\x73\x10\xf0\x9a\x83\xda\xa3\xbf\xd0\x21\xfb\x7f\xa9\x0e\x7f\x15\x79\x4a\x52\x89\xfe\xa0\x94\x23\x5f\x74\x55\x23\xd1\x51\x2d\x7c\x76\x24\x9f\x77\xeb\x55\x53\xfa\x42\x81\xc4\x30\x4e\x31\x91\x44\xbe\x97\x91\x25\x81\x0a\xca\xc2\xb5\x8f\x8c\x63\xbc\xe0\x83\xe3\xa9\xf4\xbc\x70\x95\xb5\x6d\x3a\x6d\x72\xbe\x64\x71\x2a\x17\xfd\x49\x91\xfc\x0c\x65\xa4\x16\xeb\xda\xe8\x43\x32\x4f\x62\x22\xef\x43\xf6\xba\xff\xdb\x42\xa3\xd3\x57\xe5\x30\x61\x1d\xa3\xde\x97\xb3\x8f\xe7\x5c\x79\xbe\x81\x19\xa4\xd0\x83\xc2\xab\xb2\x47\x31\x14\x1c\xde\x76\x5d\x5f\x6e\x04\xbc\x28\xbc\xea\xb4\x7f\x18\xa4\xd4\x58\x74\xd6\x39\x95\x65\xb4\xdd\x22\x74\x78\x33\x57\x26\x41\x23\x8c\xb8\xab\xaf\x83\x76\x5e\x19\x35\x29\xb7\x7a\x7c\x8c\xdf\xe7\xe9\x41\x5e\xc0\x83\x4e\x8f\x3a\xa0\x75\x87\x93\x82\x22\x8f\x0a\xd3\xc5\x71\x24\xf9\x2c\x84\x42\x6c\x31\x6d\xb2\xf2\x46\xad\xec\xff\x01\x00\x00\xff\xff\xbc\x09\xff\xac\x9e\x07\x00\x00")

func confLocaleLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enUsIni,
		"conf/locale/locale_en-US.ini",
	)
}

func confLocaleLocale_enUsIni() (*asset, error) {
	bytes, err := confLocaleLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-US.ini", size: 1950, mode: os.FileMode(420), modTime: time.Unix(1494395450, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_frFrIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func confLocaleLocale_frFrIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_frFrIni,
		"conf/locale/locale_fr-FR.ini",
	)
}

func confLocaleLocale_frFrIni() (*asset, error) {
	bytes, err := confLocaleLocale_frFrIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_fr-FR.ini", size: 0, mode: os.FileMode(420), modTime: time.Unix(1493941287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
	"conf/locale/locale_en-US.ini": confLocaleLocale_enUsIni,
	"conf/locale/locale_fr-FR.ini": confLocaleLocale_frFrIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-US.ini": &bintree{confLocaleLocale_enUsIni, map[string]*bintree{}},
			"locale_fr-FR.ini": &bintree{confLocaleLocale_frFrIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

