// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/locale/locale_en-US.ini
// conf/locale/locale_fr-FR.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xff\x52\xdb\xca\x15\xfe\x7f\x9f\xe2\xe0\x4e\x7a\xa1\x63\xc0\xc0\x2d\xa1\x38\xee\x5c\x61\xcb\xa0\xc1\xb6\x5c\x49\x0e\x97\x66\x32\xca\x22\x1d\xdb\x3b\xac\x76\x9d\xdd\x15\xd8\xfd\xa3\xaf\xd3\x07\xe9\x8b\x75\x76\x25\x19\x9b\x74\xe6\x26\x99\x09\x61\x75\xce\xb7\x67\xbf\xef\xfc\xf2\xa6\xd3\x74\xe2\x8d\x7d\xe8\xc1\x82\x99\x13\xb3\x36\xa4\xef\x4d\xd2\xc8\xbf\x0d\xe2\xc4\x8f\xa0\x07\x46\x95\x48\xbc\x49\x38\x79\x1c\x87\xb3\x38\xed\x47\xbe\x97\xf8\xcd\x39\xf9\xa2\x51\xbd\xa0\xfa\x4a\xa6\x51\x98\x84\xfd\x70\x04\x3d\x58\x1a\xb3\x22\x83\x70\xec\x05\x13\xe8\x01\x97\x19\xe5\x4b\xa9\x0d\x89\xc2\x30\x49\x67\x91\x35\xf9\x70\xd8\xd8\x1f\xe9\xeb\xd3\xd3\x0f\x87\x95\xf9\x91\xbe\xfe\x70\x78\x97\x24\xd3\x74\x1a\x46\xc9\x91\x3e\x25\xb3\x49\xf0\x7b\x1a\x87\xfd\x7b\x3f\x49\xa7\x7e\x34\x0e\xe2\x38\x08\x2d\xec\xe5\xe5\x25\x71\x96\xde\x60\x60\xc3\xec\x9c\xb8\xbf\x64\xeb\x0d\x3d\xf8\xb5\xd3\xe9\x90\x41\x10\x7b\x37\x23\x3f\x8d\xc2\x59\xe2\x47\xe9\x28\xbc\x85\x1e\xcc\x29\xd7\x48\xba\x30\x5b\xad\x50\x01\xc7\x17\xe4\x20\xe7\x60\xb0\x58\x71\x6a\x10\xa8\xc8\x41\x1b\x6a\x58\x06\x73\xc6\x11\x56\xd4\x2c\x49\x17\x72\x9c\xd3\x92\x1b\x60\x1a\xcc\xb2\x3a\x85\xd7\x25\x2a\x6c\xc8\xb3\x5f\x70\x8d\x59\x69\x30\x27\x71\xe2\x25\x41\x3f\x75\xcf\x9e\x7a\xc9\x1d\xf4\x08\xf9\x92\x53\x43\x9f\xa8\xc6\xaf\xa4\x0b\x3e\x33\x4b\x54\xd0\x2a\x36\xfa\x3b\x6f\xb5\xa1\xb5\x92\xda\x2c\x14\xea\x16\x48\x05\x2d\xfd\x9d\x33\x83\x17\xad\x36\x6c\x64\x09\x19\x15\x90\x49\x21\x30\x33\x60\x24\x24\x6c\x70\x03\xaf\xcc\x2c\x61\xbc\x89\xff\x31\x82\x95\x92\x46\x66\x92\x93\xc1\x4d\x9a\x3c\x4e\xad\x42\xb5\x3f\xb9\x0b\x63\xcb\xc6\xd9\xf9\x47\xc7\xd1\xd9\xf5\xc5\x45\xe7\x92\x34\xaa\xcb\x85\x26\xb3\xd8\x49\xad\xa4\x34\x64\xea\xc5\xf1\xc3\x00\x7a\xa4\x0b\x43\x1b\xc5\x4e\x4c\x82\x6f\xda\x80\x75\xd0\x39\xd3\xf4\x89\xa3\x0d\x5b\xe1\xf7\x92\x29\xac\xa2\x7e\x41\xc5\xe6\x9b\xe3\x79\xc9\x79\x8b\xc4\xf1\x28\x1d\x87\x03\x7b\x51\x6d\xdf\xc0\x36\x8f\x73\x54\xb7\x0c\xcb\x9f\x5a\x6d\x28\x35\x02\x7d\xd2\x92\x97\xe6\x8d\x5d\xe1\x9e\xaf\x0d\x55\x06\xa8\x06\x9b\x70\x2c\x43\x52\x31\xda\x10\x7f\x92\x3f\x11\xf2\x45\xe1\x4a\x6a\x66\xa4\xda\x58\x7a\x23\x29\x4d\x85\x32\x97\x0a\xb4\x91\x8a\x89\x05\x6c\x6d\x18\xea\x5f\x34\x58\x3d\xda\xbb\xc2\xb6\xfe\x7d\xfa\xa9\xd4\xa8\x04\x2d\xf0\xef\xa7\x0b\x66\xd6\xe6\x78\xd7\xa7\xe5\xf2\xd8\x69\xc9\xe5\xe2\x2b\xd9\x93\xb7\x0b\x7d\x2a\xe0\x09\xa1\x95\x49\xa1\x25\xc7\xfa\x7d\x36\x89\x5a\xfb\xd7\x34\x06\x36\x0b\x35\x42\x26\x8b\x82\x5a\x61\x35\xae\xa8\xb2\x39\x58\x94\xdc\xb0\x15\x47\x28\x64\x8e\xba\x0d\x78\xb2\x38\xd9\xba\xb5\x5d\x5e\xb6\x48\x4d\x6e\x7d\x4a\xba\x70\x53\xce\xe7\x2e\xa5\xc5\xc2\x2c\x6d\x4e\x67\x4b\x2a\x04\xf2\x36\x3c\x23\xae\x80\x39\x0e\x99\x0b\x81\xcd\x1d\xb3\xb9\x14\xbf\x18\x78\x16\xf2\x15\x5e\x97\xd4\x54\x1f\x4f\xc8\xcd\x6c\x38\xb4\xf5\xe2\xdb\x6a\x3b\xeb\x74\x76\xf2\x35\x51\x34\x73\xc2\x07\x62\x2e\xed\xcf\x07\xaa\x84\xfd\xe9\x2b\x25\x95\xfd\xcf\x90\x1a\xca\xdf\x3d\xb8\xf2\x22\x23\xff\xb3\x6f\x5b\x80\xfb\x95\x34\xe9\xb0\xa5\xcb\x3e\xd6\x65\x9a\xa3\xf7\xa4\x3e\xb7\x72\x72\xa4\x2f\x08\x58\xac\xcc\xc6\xf2\xc4\xc4\x12\x15\x33\x0d\xde\x16\xc9\xf1\xf2\x1e\xc6\x1e\xfe\x04\x46\x17\x92\xa5\xad\x60\x61\x33\x55\x03\x2d\x8d\x2c\xa8\xc1\x1c\xb8\x5c\x80\x92\xc6\xca\x72\xa8\x5f\x99\xc9\x1c\xb5\x73\xc9\xb9\x7c\xb5\x49\x25\x57\x86\x49\xa1\x8f\xc8\x28\xbc\x4d\xa3\x30\xd9\x69\x91\x5d\x88\x71\x51\xa0\x30\x0e\x24\xa7\x8c\x6f\xc8\xc0\x0b\x46\x8f\x3f\xd8\x8d\xe9\x1a\x34\xfb\x17\x82\x5e\xb2\xb9\xb1\x17\x68\x26\x16\x1c\x9d\xd4\x7b\x5c\x9e\x5f\x41\x81\x54\x68\x38\x83\x4f\x9f\xe0\xfc\xaa\x0d\xe7\x7f\xbd\x1c\xdf\x90\xb1\xf7\x7b\x1a\x07\xff\xf4\xd3\xf8\x2e\x18\xda\x9a\x3f\xbf\xaa\x71\x39\x13\x08\xa2\x2c\x9e\x50\xbd\x03\x76\x4e\xa3\x60\xe2\xc7\x95\xce\xf6\x8f\xd5\x7a\xbd\x62\x0a\x73\xc8\xe9\x46\x5b\x0f\x1b\xbc\x6b\x85\x87\x39\x72\xb4\x2d\x72\x6e\x50\x41\x41\xd7\xce\xe4\xc8\xc1\x0c\xbc\x47\x8b\xf2\x71\x2b\x86\xe6\x34\x7b\xfe\x41\x0d\x77\xfa\x53\x72\x3c\xe0\xd3\x52\xca\x67\x98\x45\x23\xe2\x26\x47\x55\x75\x27\x6b\xa9\x0a\xd7\x41\x9d\x52\x55\x60\x4e\x1f\x26\x05\x79\xcf\x6b\x54\x09\x87\x2f\xa8\x36\x36\xd8\xda\x20\x75\x2a\xfc\x60\x26\x45\x56\x03\x3a\x2d\x70\x9d\xa1\xd6\xa8\x61\x0d\x3b\x04\x6f\x4b\x62\x4c\xd7\xac\x28\x8b\x8a\x26\x23\xab\x22\xe3\x72\xb1\x40\xe5\x40\xf4\x2e\x2f\x17\x6e\x5e\x6a\xcd\xa4\xd8\x6b\xff\x58\x48\xb5\xb1\x65\x53\xb7\x09\xcb\x9c\xc2\x9c\xe9\x77\x15\x54\x1b\xda\x59\xfb\x39\x18\xb8\x96\xed\x14\xec\xc2\x54\xc9\x17\x96\xa3\xb2\x8d\x60\xce\xb6\xf9\x48\xba\x50\xf9\x5c\x83\x90\x06\x96\x96\x6d\x2a\x36\x8d\xd5\x06\x0d\xe9\x3a\x88\x6b\xa8\xe3\x7a\x1b\x77\x75\xc3\xf9\x66\x1b\xe4\x69\xfd\x55\x7f\x23\x5d\x70\x91\x5d\x83\x40\xf3\x2a\xd5\x73\xcf\x64\xab\x36\xcd\x73\xd5\xbb\xbe\xbc\xf8\xf8\xb7\xf6\x8a\x6a\xfd\x2a\x55\xde\x2b\x68\x46\x95\x14\xed\xfc\xa9\xd7\x69\xaf\xa4\xe4\xa9\xe5\xb3\x77\xd6\xe9\xb4\x59\xce\x31\x35\xac\x40\x59\x9a\xde\xd9\x95\xe5\xd1\x8d\xc0\x6b\x58\xc8\x63\xfd\x9d\x1f\xe7\x8a\xbd\xa0\x3a\x75\x87\x90\x6b\xd1\x04\xac\x8d\x6d\xe1\x4d\x64\x76\x5c\x5d\x37\xf7\xfd\xd6\xc4\x98\x1a\x9b\x12\xdf\xb6\x24\xa5\xfd\x70\x32\x0c\xec\xd0\xdf\x7b\x89\xab\xcb\xea\xc9\x99\x94\xcf\x0c\xc1\x36\x7c\xd2\x0f\xc3\xfb\xc0\x6f\x56\x22\x96\x72\xf6\x8c\xe9\x4a\x0a\x86\xd6\x23\xa8\x3a\xa6\x1d\x53\x0d\x5f\x4c\xb8\x7d\x47\xd7\xd3\x71\x47\xae\x6a\xc7\xa8\x01\x63\xbf\x3f\x8b\xfc\x9d\xcd\xa3\xce\x5c\x8d\xa6\xbe\x7f\xcf\xd7\xa5\xa4\x3f\x71\x8b\x4b\xec\x27\x69\x85\xb2\xdb\x52\xaa\xdb\x6f\xfb\x60\x79\x04\x26\x0c\xaa\x17\xca\xf7\x40\x2e\x2e\x3b\x1d\x72\xdb\x4f\x83\x49\xe2\x47\x9f\xbd\x51\x9a\x04\xee\x55\xee\xfc\x0d\x83\xb3\x39\x3a\x94\x3d\xe7\xab\xcb\x5f\x3b\x1d\x12\xfb\x6e\xdf\x4a\x47\xc1\xd0\x6f\xdc\xab\x2f\x5d\xe8\xbf\xd1\xe6\x06\x6c\x3f\x8e\x86\xc4\xfe\x93\xee\x93\x98\x66\x5a\xcd\x5d\xe6\x67\xa5\x62\xc6\x8d\xe6\x83\x83\xfe\x9d\x37\xb9\xf5\x21\xb9\x0b\x62\x48\x42\xb8\xf7\xfd\x29\x3c\x86\xb3\x08\xdc\x2e\x32\xf0\x12\x0f\x62\x6f\xe8\x1f\x1c\x90\xd8\xef\x47\x7e\x92\xde\xfb\xb6\x56\x0f\xfe\xf4\xdb\x70\xe0\x3f\x44\xfe\x43\xf4\xe7\xbf\x1c\x92\x60\x12\x27\xde\x68\x94\x8e\xc2\xfe\xfd\x0e\xb9\x5e\x69\xe4\x31\x97\x0b\x26\x40\x61\x81\xae\xeb\xd9\x0a\xb5\xed\x39\xb0\xdb\xed\xd8\x1f\xdf\xf8\xd1\x5b\xbf\xaa\x23\xb6\x77\xbf\x6d\xc3\x6b\x93\x66\xc8\x51\x1b\x46\x1b\x83\xad\xe7\x9e\x15\x2f\x05\xfd\x23\xa1\xdd\x64\x6f\xb4\xae\x9a\x5d\xce\x32\xdb\x70\xec\xb2\x01\x55\xb0\x76\xe5\x2c\x75\x23\x7c\x15\xac\xdd\x22\xed\xde\xdd\x64\x40\x85\xfb\x7f\xbe\x35\x31\x39\xa8\xb4\x86\x22\x5f\xd8\xd9\x95\xf8\x4a\x46\xde\xe4\xd6\x3e\x15\xc5\xf1\x2c\x6e\xcf\xd5\xf1\x30\x72\x1b\xa0\x3d\xf3\xc5\x82\x33\xbd\x6c\x0f\x15\x15\xff\xfd\x0f\x65\x9a\xfc\x2f\x00\x00\xff\xff\x44\xae\x8d\x7b\x16\x0c\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 3094, mode: os.FileMode(420), modTime: time.Unix(1494081895, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enUsIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x54\xc1\x8a\xdc\x30\x0c\xbd\xfb\x2b\x44\x2e\xbd\x2c\xf9\x80\x42\x0f\xa5\xdd\xc2\x42\x29\x65\x4b\x0b\x65\x59\x8c\xc7\xd6\x24\xa6\x8e\x1c\x64\x65\x66\xe7\xef\x8b\x1d\x67\xe2\xd9\x6e\x4f\xb1\xf5\xde\x53\xa4\x27\x25\x4f\x21\x0e\x9e\x9e\x95\x78\x09\x08\x1f\xa0\xfb\xe1\x07\x82\x07\xea\x54\xf2\x03\x69\x4f\x37\xb1\x25\x21\x93\x99\x0a\xf1\x67\x3d\xef\x51\x3d\x07\x63\x71\x8c\xc1\x21\x67\xc6\xef\xb8\x30\x6c\x60\xdf\x29\x9c\x8c\x0f\x19\xb8\xcf\x87\x7a\x7f\x53\x54\x90\xbe\x53\xb3\x49\xe9\x1c\xd9\x65\xe0\x7b\x3d\xef\xd1\x37\xa5\xe4\x2d\xc2\xc6\xe8\x3b\xc5\x38\xa3\x11\xfd\x3f\xcd\x47\x72\x20\x23\x42\xca\x5d\x45\x42\x18\x91\xb1\xc8\x26\x9c\x0e\xc8\x7a\x6d\xf6\xb1\x5e\x21\xf7\xab\x9e\x18\x07\x9f\x04\xb9\xf1\xed\xb1\x86\xb2\x74\x3d\xdd\x46\x29\x8a\x36\x21\xc4\x33\xba\x1d\x60\x23\x3e\x12\x50\x14\xa8\x58\xce\x7e\x8c\x3c\x3d\xef\x5d\x66\xe5\x64\xc4\x8e\xad\x0b\x09\x5c\xc4\x44\xef\x04\x0a\xd4\x0e\x61\xd3\x79\xb2\x91\x19\xad\x64\xdd\x03\x9d\x4c\xf0\xee\x3a\x0e\x88\x7c\x75\xa9\x11\x1f\x10\x49\x8b\xf9\x83\xd4\x8e\x18\x4c\x60\x34\xee\x02\x05\xb9\x83\x14\x99\x2f\x8d\x8a\x31\x21\x9f\xd6\xc6\xae\x9a\x2d\x78\x07\x73\x40\x93\x10\xec\x18\x63\x42\x30\x14\x65\xc4\x7d\x31\x6e\x4a\x17\x41\x26\xfd\xca\xab\x7f\x6a\xaf\xbc\x4e\x25\x73\x5a\x97\x36\x3f\xed\x68\x68\xc0\xd4\xa9\xfb\x9b\x3d\x7b\x0f\xdb\xa6\x21\x73\xe4\x36\xe1\xba\x90\xd9\x6e\x23\xd9\xf8\x84\x22\x9e\x86\xd4\x8c\x35\xb7\x03\x5b\xbc\x53\xcb\xec\x8c\xa0\x9e\x39\x1e\x7d\x40\x9d\x16\x6b\x31\xa5\x32\x98\x35\x04\xb9\x24\x07\x15\x38\x2e\x21\x5c\xda\xcc\x9b\xb2\x79\xc3\x55\x78\x7d\x89\x7a\x1a\xbc\xbc\x88\x26\x3c\x37\xbc\x6f\x78\x86\xc1\x4b\x2f\x2f\xd2\xa9\xac\x48\xda\x46\x12\x24\xd1\xd6\x50\xb6\x0c\xa7\x59\x2e\x99\xfa\x69\x8d\x43\x3c\x42\x21\xc2\x4a\x80\x03\x42\xe1\x74\xaa\x58\xa1\x6f\xb2\x14\x1f\xc7\xb8\x04\x97\xb7\x6a\xa7\xd6\x6a\x9e\x95\xc3\x64\xd9\xcf\x79\x63\x5f\x7f\x45\x9f\x77\xa8\xef\xfb\xb5\xbc\x92\xfd\xad\xdf\xc2\x97\x1a\x87\xb3\x97\x11\xf0\x45\x90\x92\x8f\x54\x55\x5b\x4f\xaf\x44\x5b\x4b\xf5\xf3\xcc\x2e\xeb\x99\xfd\xc9\xc8\xbe\x00\xf5\xbe\xa1\xcb\x21\x78\xbb\x83\xe5\xda\x29\xe3\x5c\x36\xb6\x54\x57\x7e\x00\xce\x01\xe1\xb9\x18\xb5\x5b\x7f\xf2\x37\xde\xff\xf2\xad\xf9\x1b\x29\xf8\x24\x0d\xe9\xab\x4f\xc5\xf2\xca\x6b\x06\x89\xce\xb7\xc4\x7b\xe7\xe5\x9a\xed\x6f\x00\x00\x00\xff\xff\x0c\x26\x8d\x16\x81\x05\x00\x00")

func confLocaleLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enUsIni,
		"conf/locale/locale_en-US.ini",
	)
}

func confLocaleLocale_enUsIni() (*asset, error) {
	bytes, err := confLocaleLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-US.ini", size: 1409, mode: os.FileMode(420), modTime: time.Unix(1494366155, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_frFrIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func confLocaleLocale_frFrIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_frFrIni,
		"conf/locale/locale_fr-FR.ini",
	)
}

func confLocaleLocale_frFrIni() (*asset, error) {
	bytes, err := confLocaleLocale_frFrIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_fr-FR.ini", size: 0, mode: os.FileMode(420), modTime: time.Unix(1493941287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
	"conf/locale/locale_en-US.ini": confLocaleLocale_enUsIni,
	"conf/locale/locale_fr-FR.ini": confLocaleLocale_frFrIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-US.ini": &bintree{confLocaleLocale_enUsIni, map[string]*bintree{}},
			"locale_fr-FR.ini": &bintree{confLocaleLocale_frFrIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

