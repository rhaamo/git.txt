// Code generated by go-bindata.
// sources:
// conf/app.ini
// conf/locale/locale_en-US.ini
// conf/locale/locale_fr-FR.ini
// DO NOT EDIT!

package bindata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _confAppIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x56\xdd\x72\xe2\x38\x16\xbe\xd7\x53\x9c\xb0\xd5\x3b\xc9\x16\x49\x48\x32\x9b\xce\x42\xb3\x35\x0e\x98\xc4\xd5\x80\x59\xdb\x74\xa6\xb7\xab\xcb\x2d\xec\x63\x50\x45\x96\x68\x49\x24\xb0\x17\xfb\x3a\xfb\x20\xfb\x62\x53\x92\x6d\x1a\xd2\x37\x93\x54\x85\x20\x9d\xf3\xe9\xe8\xfb\xce\x8f\xbc\xd9\x2c\x9d\x7a\x13\x1f\xfa\xb0\x64\xe6\xc2\x6c\x0d\x21\x5f\x34\xaa\x17\x54\x5f\xc9\x2c\x0a\x93\x70\x10\x8e\xa1\x0f\x2b\x63\xd6\x64\x18\x4e\xbc\x60\x0a\x7d\xe0\x32\xa3\x7c\x25\xb5\x21\x51\x18\x26\xe9\x3c\xb2\x26\xef\x4e\x1b\xfb\x33\xdd\xbd\xbc\x7c\x77\x5a\x99\x9f\xe9\xee\xbb\xd3\xc7\x24\x99\xa5\xb3\x30\x4a\xce\xf4\x25\x99\x4f\x83\xdf\xd3\x38\x1c\x7c\xf4\x93\x74\xe6\x47\x93\x20\x8e\x83\xd0\xc2\xde\xde\xde\x12\x67\xe9\x0d\x87\x11\xf4\xa1\x73\xe1\x7e\xc9\xde\x1b\xfa\xf0\x6b\xa7\xd3\x21\xc3\x20\xf6\xee\xc7\x7e\x1a\x85\xf3\xc4\x8f\xd2\x71\xf8\x00\x7d\x28\x28\xd7\x48\x7a\x30\x5f\xaf\x51\x01\xc7\x17\xe4\x20\x0b\x30\x58\xae\x39\x35\x08\x54\xe4\xa0\x0d\x35\x2c\x83\x82\x71\x84\x35\x35\x2b\xd2\x83\x1c\x0b\xba\xe1\x06\x98\x06\xb3\xaa\x56\xe1\x75\x85\x0a\x1b\x42\xec\x0e\x6e\x31\xdb\x18\xcc\x49\x9c\x78\x49\x30\x48\xdd\xb5\x67\x5e\xf2\x08\x7d\x42\xbe\xe4\xd4\xd0\x05\xd5\xf8\x95\xf4\xc0\x67\x66\x85\x0a\x5a\xe5\x4e\x7f\xe7\xad\x36\xb4\xd6\x52\x9b\xa5\x42\xdd\x02\xa9\xa0\xa5\xbf\x73\x66\xf0\xa6\xd5\x86\x9d\xdc\x40\x46\x05\x64\x52\x08\xcc\x0c\x18\x09\x09\x1b\xde\xc3\x2b\x33\x2b\x98\xec\xe2\x7f\x8d\x61\xad\xa4\x91\x99\xe4\x64\x78\x9f\x26\x9f\x67\x56\xa4\xda\x9f\x3c\x86\xb1\x65\xe3\xea\xfa\xbd\xe3\xe8\xaa\x7b\x73\xd3\xb9\x25\x8d\x92\x72\xa9\xc9\x3c\xf6\x2d\x87\x4a\x4a\x43\x66\x5e\x1c\x3f\x0d\xa1\x4f\x7a\x30\xb2\x51\x1c\xc4\x24\xf8\xae\x0d\x58\x07\x9d\x33\x4d\x17\x1c\x6d\xd8\x0a\xbf\x6f\x98\xc2\x2a\xea\x17\x54\xac\xd8\x9d\x17\x1b\xce\x5b\x24\x8e\xc7\xe9\x24\x1c\xda\x83\x6a\xfb\x06\xb6\xb9\x9c\xa3\xba\x65\x58\xbe\x68\xb5\x61\xa3\x11\xe8\x42\x4b\xbe\x31\x3f\xd8\x15\xee\xfa\xda\x50\x65\x80\x6a\xb0\x09\xc7\x32\x24\x15\xa3\x0d\xf1\x17\xf9\x82\x90\x2f\x0a\xd7\x52\x33\x23\xd5\xce\xd2\x1b\x49\x69\x2a\x94\x42\x2a\xd0\x46\x2a\x26\x96\xb0\xb7\x61\xa8\x7f\xd1\x60\xf5\x68\x1f\x0a\xdb\xfa\xef\xe5\x87\x8d\x46\x25\x68\x89\xff\xbc\x5c\x32\xb3\x35\xe7\x87\x3e\x2d\x97\xc7\x4e\x4b\x2e\x97\x5f\xc9\x91\xbc\x3d\x18\x50\x01\x0b\x84\x56\x26\x85\x96\x1c\xeb\xfb\xd9\x24\x6a\x1d\x1f\xd3\x18\xd8\x2c\xd4\x08\x99\x2c\x4b\x6a\x85\xd5\xb8\xa6\xca\xe6\x60\xb9\xe1\x86\xad\x39\x42\x29\x73\xd4\x6d\xc0\x8b\xe5\xc5\xde\xad\xed\xf2\xb2\x45\x6a\x72\xeb\x55\xd2\x83\xfb\x4d\x51\xb8\x94\x16\x4b\xb3\xb2\x39\x9d\xad\xa8\x10\xc8\xdb\xf0\x8c\xb8\x06\xe6\x38\x64\x2e\x04\x56\x38\x66\x73\x29\x7e\x31\xf0\x2c\xe4\x2b\xbc\xae\xa8\xa9\x36\x2f\xc8\xfd\x7c\x34\xb2\xf5\xe2\xdb\x6a\xbb\xea\x74\x0e\xf2\x35\x51\x34\x73\xc2\x07\xa2\x90\xf6\xf3\x89\x2a\x61\x3f\x7d\xa5\xa4\xb2\xff\x8c\xa8\xa1\xfc\xcd\x85\x2b\x2f\x32\xf6\x3f\xf9\xb6\x05\xb8\xaf\xa4\x49\x87\x3d\x5d\xf6\xb2\x2e\xd3\x1c\xbd\x17\xf5\xba\x95\x93\x23\x7d\x41\xc0\x72\x6d\x76\x96\x27\x26\x56\xa8\x98\x69\xf0\xf6\x48\x8e\x97\xb7\x30\x76\xf1\x4f\x60\xf4\x20\x59\xd9\x0a\x16\x36\x53\x35\xd0\x8d\x91\x25\x35\x98\x03\x97\x4b\x50\xd2\x58\x59\x4e\xf5\x2b\x33\x99\xa3\xb6\x90\x9c\xcb\x57\x9b\x54\x72\x6d\x98\x14\xfa\x8c\x8c\xc3\x87\x34\x0a\x13\x2f\xb1\xaa\x18\xb5\xb1\x92\xc4\xb8\x2c\x51\x18\x07\x92\x53\xc6\x77\x64\xe8\x05\xe3\xcf\x3f\xd9\x4d\xe8\x16\x34\xfb\x0f\x82\x5e\xb1\xc2\xd8\x03\x34\x13\x4b\x8e\x4e\xea\x23\x2e\xaf\xef\xa0\x44\x2a\x34\x5c\xc1\x87\x0f\x70\x7d\xd7\x86\xeb\xbf\xdf\x4e\xee\xc9\xc4\xfb\x3d\x8d\x83\x7f\xfb\x69\xfc\x18\x8c\x6c\xcd\x5f\xdf\xd5\xb8\x9c\x09\x04\xb1\x29\x17\xa8\xde\x00\x3b\xa7\x71\x30\xf5\xe3\x4a\x67\xfb\x63\xb5\xde\xae\x99\xc2\x1c\x72\xba\xd3\xd6\xc3\x06\xef\x5a\xe1\x69\x8e\x1c\x6d\x8b\x2c\x0c\x2a\x28\xe9\xd6\x99\x9c\x39\x98\xa1\xf7\xd9\xa2\xbc\xdf\x8b\xa1\x39\xcd\x9e\x7f\x52\xc3\xad\xfe\x29\x39\x9e\x70\xb1\x92\xf2\x19\xe6\xd1\x98\xb8\xc9\x51\x55\xdd\xc5\x56\xaa\xd2\x75\x50\xa7\x54\x15\x98\xd3\x87\x49\x41\xde\xf2\x1a\x55\xc2\xe1\x0b\xaa\x9d\x0d\xb6\x36\x48\x9d\x0a\x3f\x99\x49\x91\xd5\x80\x4e\x0b\xdc\x66\xa8\x35\x6a\xd8\xc2\x01\xc1\xfb\x92\x98\xd0\x2d\x2b\x37\x65\x45\x93\x91\x55\x91\x71\xb9\x5c\xa2\x72\x20\xfa\x90\x97\x1b\x37\x2f\xb5\x66\x52\x1c\xb5\x7f\x2c\xa5\xda\xd9\xb2\xa9\xdb\x84\x65\x4e\x61\xce\xf4\x9b\x0a\xaa\x0d\xed\xac\xfd\x14\x0c\x5d\xcb\xae\x96\x48\x0f\x66\x4a\xbe\xb0\x1c\x95\x6d\x05\x05\xdb\x67\x24\xe9\xd5\x26\x5d\x10\xd2\xc0\xca\xf2\x4d\xc5\xae\xb1\xda\xa1\x21\x3d\x17\x68\x17\xea\xc8\x7e\x0c\xbc\xba\xe5\x7c\xb3\x2d\xf2\xb2\xde\xd5\xdf\x48\x0f\x5c\x6c\x5d\x10\x68\x5e\xa5\x7a\xee\x9b\x6c\xdd\xa6\x79\xae\xfa\xdd\xdb\x9b\xf7\xff\x68\xaf\xa9\xd6\xaf\x52\xe5\xfd\x92\x66\x54\x49\xd1\xce\x17\xfd\x4e\x7b\x2d\x25\x4f\x2d\xa3\xfd\xab\x4e\xa7\xcd\x72\x8e\xa9\x61\x25\xca\x8d\xe9\x5f\xdd\x59\x26\xdd\x10\xec\xc2\x52\x9e\xeb\xef\xfc\x3c\x57\xec\x05\xd5\xa5\x5b\x84\x5c\x8b\x26\x60\x6d\x6c\x13\x6f\x22\xb3\x03\xab\xdb\x9c\xf7\x5b\x13\x63\x6a\x6c\x52\x7c\xdb\xd3\x94\x0e\xc2\xe9\x28\xb0\x63\xff\xe8\x26\xae\x32\xab\x2b\x67\x52\x3e\x33\x04\xdb\xf2\xc9\x20\x0c\x3f\x06\x7e\xf3\xd0\x61\x29\x67\xcf\x98\x2e\xe5\x92\x19\xeb\x11\x54\x3d\xd3\x0e\xaa\x86\x2f\x26\xdc\x8b\x47\xd7\xf3\xf1\x40\xb0\xea\x95\x51\x03\xc6\xfe\x60\x1e\xf9\x07\x6f\x8f\x3a\x77\x35\x9a\xfa\xfc\x23\x5f\x97\x94\xfe\xd4\x3d\x5d\x62\x3f\x49\x2b\x94\xc3\xa6\x52\x9d\xfe\x30\x00\xcb\x23\x30\x61\x50\xbd\x50\x7e\x04\x72\x73\xdb\xe9\x90\x87\x41\x1a\x4c\x13\x3f\xfa\xe4\x8d\xd3\x24\x70\xb7\x72\xeb\x3f\x30\x38\x2b\xd0\xa1\x1c\x39\xdf\xdd\xfe\xda\xe9\x90\xd8\x77\x2f\xae\x74\x1c\x8c\xfc\xc6\xbd\xda\xe9\xc1\xe0\x07\x6d\x6e\xc4\x0e\xe2\x68\x44\xec\x9f\xf4\x98\xc4\x34\xd3\xaa\x70\xb9\x9f\x6d\x14\x33\x6e\x38\x9f\x9c\x0c\x1e\xbd\xe9\x83\x0f\xc9\x63\x10\x43\x12\xc2\x47\xdf\x9f\xc1\xe7\x70\x1e\x81\x7b\x8d\x0c\xbd\xc4\x83\xd8\x1b\xf9\x27\x27\x24\xf6\x07\x91\x9f\xa4\x1f\x7d\x5b\xad\x27\x7f\xf9\x6d\x34\xf4\x9f\x22\xff\x29\xfa\xeb\xdf\x4e\x09\xf9\xc2\xae\xee\xc4\x57\x32\xf6\xa6\x0f\xb6\xc6\x50\x9c\xcf\xe3\x76\xa1\xce\x47\x91\x7b\xe2\xd8\x35\x5f\x2c\x39\xd3\xab\xf6\x48\x51\xf1\xff\xff\x51\xa6\xc9\x1f\x01\x00\x00\xff\xff\xd3\x6b\x1b\xf6\xcb\x0a\x00\x00")

func confAppIniBytes() ([]byte, error) {
	return bindataRead(
		_confAppIni,
		"conf/app.ini",
	)
}

func confAppIni() (*asset, error) {
	bytes, err := confAppIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/app.ini", size: 2763, mode: os.FileMode(420), modTime: time.Unix(1494015420, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_enUsIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func confLocaleLocale_enUsIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_enUsIni,
		"conf/locale/locale_en-US.ini",
	)
}

func confLocaleLocale_enUsIni() (*asset, error) {
	bytes, err := confLocaleLocale_enUsIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_en-US.ini", size: 0, mode: os.FileMode(420), modTime: time.Unix(1493941326, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _confLocaleLocale_frFrIni = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func confLocaleLocale_frFrIniBytes() ([]byte, error) {
	return bindataRead(
		_confLocaleLocale_frFrIni,
		"conf/locale/locale_fr-FR.ini",
	)
}

func confLocaleLocale_frFrIni() (*asset, error) {
	bytes, err := confLocaleLocale_frFrIniBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "conf/locale/locale_fr-FR.ini", size: 0, mode: os.FileMode(420), modTime: time.Unix(1493941287, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"conf/app.ini": confAppIni,
	"conf/locale/locale_en-US.ini": confLocaleLocale_enUsIni,
	"conf/locale/locale_fr-FR.ini": confLocaleLocale_frFrIni,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"conf": &bintree{nil, map[string]*bintree{
		"app.ini": &bintree{confAppIni, map[string]*bintree{}},
		"locale": &bintree{nil, map[string]*bintree{
			"locale_en-US.ini": &bintree{confLocaleLocale_enUsIni, map[string]*bintree{}},
			"locale_fr-FR.ini": &bintree{confLocaleLocale_frFrIni, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

