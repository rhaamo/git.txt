APP_NAME = git.txt
CAN_REGISTER = true
ANONYMOUS_CREATE = true
; Either "dev", "prod" or "test"
RUN_MODE = dev

[server]
PROTOCOL = http
DOMAIN = localhost
ROOT_URL = %(PROTOCOL)s://%(DOMAIN)s:%(HTTP_PORT)s/
UNIX_SOCKET_PERMISSION = 666
HTTP_ADDR = 0.0.0.0
HTTP_PORT = 4000
DISABLE_ROUTER_LOG = false
; Upper level of template and static file path
; default is the path where git.txt is executed
STATIC_ROOT_PATH =

[database]
; Either "mysql", "postgres" or "sqlite3", you can connect to TiDB with MySQL protocol
DB_TYPE = sqlite3
HOST = 127.0.0.1:3306
NAME = gogs
USER = root
PASSWD =
; For "postgres" only, either "disable", "require" or "verify-full"
SSL_MODE = disable
; For "sqlite3" and "tidb", use absolute path when you start as service
PATH = git.txt.db

[repository]
; Root path for storing repositories's data, default is "~/<username>/gitxt-repositories"
ROOT =
; If you want to disable cloning using HTTP
DISABLE_HTTP_GIT = false
; You can specify full path to git if non-standard
; Git binary is only used for HTTP git upload-pack (checkout over HTTP)
GIT_BINARY = git

[log]
ROOT_PATH =

; Can be "console" and "file", default is "console"
; Use comma to separate multiple modes, e.g. "console, file"
MODE = console
; Buffer length of channel, keep it as it is if you don't know what it is.
BUFFER_LEN = 100
; Either "Trace", "Info", "Warn", "Error", "Fatal", default is "Trace"
LEVEL = Trace

; For "console" mode only
[log.console]
; leave empty to inherit
LEVEL =

; For "file" mode only
[log.file]
; leave empty to inherit
LEVEL =
; This enables automated log rotate (switch of following options)
LOG_ROTATE = true
; Segment log daily
DAILY_ROTATE = true
; Max size shift of single file, default is 28 means 1 << 28, 256MB
MAX_SIZE_SHIFT = 28
; Max line number of single file
MAX_LINES = 1000000
; Expired days of log file (delete after max days)
MAX_DAYS = 7

; For "slack" mode only
[log.slack]
; leave empty to inherit
LEVEL =
; Webhook URL
URL =

[log.xorm]
; Enable file rotation
ROTATE = true
; Rotate every day
ROTATE_DAILY = true
; Rotate once file size excesses x MB
MAX_SIZE = 100
; Maximum days to keep logger files
MAX_DAYS = 3

[session]
; Either "memory", "file", or "redis", default is "memory"
PROVIDER = file
; Provider config options
; memory: not have any config yet
; file: session file path, e.g. `data/sessions`
; redis: network=tcp,addr=:6379,password=macaron,db=0,pool_size=100,idle_timeout=180
; mysql: go-sql-driver/mysql dsn config string, e.g. `root:password@/session_table`
PROVIDER_CONFIG = data/sessions
; Session cookie name
COOKIE_NAME = i_like_ponies
; If you use session in https only, default is false
COOKIE_SECURE = false
; Enable set cookie, default is true
ENABLE_SET_COOKIE = true
; Session GC time interval, default is 3600
GC_INTERVAL_TIME = 3600
; Session life time, default is 86400
SESSION_LIFE_TIME = 86400
; Cookie name for CSRF
CSRF_COOKIE_NAME = _csrf

[security]
; !!CHANGE THIS TO KEEP YOUR USER DATA SAFE!!
SECRET_KEY = !#@FDEWREWR&*(
INSTALL_LOCK = false
; Auto-login remember days
LOGIN_REMEMBER_DAYS = 7
COOKIE_USERNAME = gitxt_celestia
COOKIE_REMEMBER_NAME = gitxt_luna
COOKIE_SECURE = false
; Enable to set cookie to indicate user login status
ENABLE_LOGIN_STATUS_COOKIE = false
LOGIN_STATUS_COOKIE_NAME = login_status

[i18n]
LANGS = en-US,fr-FR
NAMES = English,FranÃ§ais

[cron]
; Enable running cron tasks periodically.
ENABLED = true
; Run cron tasks when Gitxt starts.
RUN_AT_START = false

; Cleanup repository archives
[cron.repo_archive_cleanup]
RUN_AT_START = true
SCHEDULE = @every 24h
; Time duration to check if archive should be cleaned
OLDER_THAN = 24h
